<?php
/**
 * ReviewInput
 *
 * PHP version 5
 *
 * @category Class
 * @package  Listae\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * listae API 2.0
 *
 * Documentación de los servicios REST de listae
 *
 * OpenAPI spec version: 2.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Listae\Client\Model;

use \ArrayAccess;
use \Listae\Client\ObjectSerializer;

/**
 * ReviewInput Class Doc Comment
 *
 * @category Class
 * @package  Listae\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReviewInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReviewInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
'email' => 'string',
'subject' => 'string',
'comment' => 'string',
'localizator' => 'string',
'reason' => 'string',
'stars_general' => 'int',
'stars_food' => 'int',
'stars_service' => 'int',
'stars_local' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
'email' => null,
'subject' => null,
'comment' => null,
'localizator' => null,
'reason' => null,
'stars_general' => 'int32',
'stars_food' => 'int32',
'stars_service' => 'int32',
'stars_local' => 'int32'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
'email' => 'email',
'subject' => 'subject',
'comment' => 'comment',
'localizator' => 'localizator',
'reason' => 'reason',
'stars_general' => 'starsGeneral',
'stars_food' => 'starsFood',
'stars_service' => 'starsService',
'stars_local' => 'starsLocal'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
'email' => 'setEmail',
'subject' => 'setSubject',
'comment' => 'setComment',
'localizator' => 'setLocalizator',
'reason' => 'setReason',
'stars_general' => 'setStarsGeneral',
'stars_food' => 'setStarsFood',
'stars_service' => 'setStarsService',
'stars_local' => 'setStarsLocal'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
'email' => 'getEmail',
'subject' => 'getSubject',
'comment' => 'getComment',
'localizator' => 'getLocalizator',
'reason' => 'getReason',
'stars_general' => 'getStarsGeneral',
'stars_food' => 'getStarsFood',
'stars_service' => 'getStarsService',
'stars_local' => 'getStarsLocal'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const REASON_BUSINESS = 'business';
const REASON_FAMILY = 'family';
const REASON_FRIENDS = 'friends';
const REASON_COUPLE = 'couple';
const REASON_SINGLE = 'single';
const REASON_OTHER = 'other';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReasonAllowableValues()
    {
        return [
            self::REASON_BUSINESS,
self::REASON_FAMILY,
self::REASON_FRIENDS,
self::REASON_COUPLE,
self::REASON_SINGLE,
self::REASON_OTHER,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['localizator'] = isset($data['localizator']) ? $data['localizator'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['stars_general'] = isset($data['stars_general']) ? $data['stars_general'] : null;
        $this->container['stars_food'] = isset($data['stars_food']) ? $data['stars_food'] : null;
        $this->container['stars_service'] = isset($data['stars_service']) ? $data['stars_service'] : null;
        $this->container['stars_local'] = isset($data['stars_local']) ? $data['stars_local'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getReasonAllowableValues();
        if (!is_null($this->container['reason']) && !in_array($this->container['reason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'reason', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Nombre del contacto
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Correo electrónico del contacto
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject Nombre del contacto
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment Correo electrónico del contacto
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets localizator
     *
     * @return string
     */
    public function getLocalizator()
    {
        return $this->container['localizator'];
    }

    /**
     * Sets localizator
     *
     * @param string $localizator Localizador de la reserva (si lo tuviera)
     *
     * @return $this
     */
    public function setLocalizator($localizator)
    {
        $this->container['localizator'] = $localizator;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason Motivo por el cual se usaron los servicios del negocio
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $allowedValues = $this->getReasonAllowableValues();
        if (!is_null($reason) && !in_array($reason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'reason', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets stars_general
     *
     * @return int
     */
    public function getStarsGeneral()
    {
        return $this->container['stars_general'];
    }

    /**
     * Sets stars_general
     *
     * @param int $stars_general Puntuación general (1-5)
     *
     * @return $this
     */
    public function setStarsGeneral($stars_general)
    {
        $this->container['stars_general'] = $stars_general;

        return $this;
    }

    /**
     * Gets stars_food
     *
     * @return int
     */
    public function getStarsFood()
    {
        return $this->container['stars_food'];
    }

    /**
     * Sets stars_food
     *
     * @param int $stars_food Puntuación de la comida (1-5)
     *
     * @return $this
     */
    public function setStarsFood($stars_food)
    {
        $this->container['stars_food'] = $stars_food;

        return $this;
    }

    /**
     * Gets stars_service
     *
     * @return int
     */
    public function getStarsService()
    {
        return $this->container['stars_service'];
    }

    /**
     * Sets stars_service
     *
     * @param int $stars_service Puntuación del servicio (1-5)
     *
     * @return $this
     */
    public function setStarsService($stars_service)
    {
        $this->container['stars_service'] = $stars_service;

        return $this;
    }

    /**
     * Gets stars_local
     *
     * @return int
     */
    public function getStarsLocal()
    {
        return $this->container['stars_local'];
    }

    /**
     * Sets stars_local
     *
     * @param int $stars_local Puntuación del local (1-5)
     *
     * @return $this
     */
    public function setStarsLocal($stars_local)
    {
        $this->container['stars_local'] = $stars_local;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
