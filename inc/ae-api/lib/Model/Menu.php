<?php
/**
 * Menu
 *
 * PHP version 5
 *
 * @category Class
 * @package  Listae\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * listae API 2.0
 *
 * DocumentaciÃ³n de los servicios REST de listae
 *
 * OpenAPI spec version: 2.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Listae\Client\Model;

use \ArrayAccess;
use \Listae\Client\ObjectSerializer;

/**
 * Menu Class Doc Comment
 *
 * @category Class
 * @package  Listae\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Menu implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Menu';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
'created' => '\DateTime',
'updated' => '\DateTime',
'name' => '\Listae\Client\Model\Text[]',
'description' => '\Listae\Client\Model\Text[]',
'formats' => '\Listae\Client\Model\CatalogItemFormats',
'availability' => '\Listae\Client\Model\AgendaBase',
'group_url' => 'string',
'price' => 'float',
'currency' => 'string',
'guest_price' => 'int',
'order_line_min_qty' => 'int',
'order_line_max_qty' => 'int',
'min_order_price' => 'float',
'takeaway' => 'bool',
'delivery' => 'bool',
'booking' => 'bool',
'image_url' => 'string',
'thumbnail_url' => 'string',
'recipe_url' => 'string',
'comment' => '\Listae\Client\Model\Text[]',
'daily_menu' => 'bool',
'tasting_menu' => 'bool',
'for_group' => 'bool',
'in_offer' => 'bool',
'people_from' => 'int',
'people_to' => 'int',
'tax_included' => 'bool',
'vip_club' => 'bool',
'modifiers' => '\Listae\Client\Model\CatalogItemModifier[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
'created' => 'date-time',
'updated' => 'date-time',
'name' => null,
'description' => null,
'formats' => null,
'availability' => null,
'group_url' => null,
'price' => 'float',
'currency' => null,
'guest_price' => 'int32',
'order_line_min_qty' => 'int32',
'order_line_max_qty' => 'int32',
'min_order_price' => 'float',
'takeaway' => null,
'delivery' => null,
'booking' => null,
'image_url' => null,
'thumbnail_url' => null,
'recipe_url' => null,
'comment' => null,
'daily_menu' => null,
'tasting_menu' => null,
'for_group' => null,
'in_offer' => null,
'people_from' => 'int32',
'people_to' => 'int32',
'tax_included' => null,
'vip_club' => null,
'modifiers' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
'created' => 'created',
'updated' => 'updated',
'name' => 'name',
'description' => 'description',
'formats' => 'formats',
'availability' => 'availability',
'group_url' => 'groupUrl',
'price' => 'price',
'currency' => 'currency',
'guest_price' => 'guestPrice',
'order_line_min_qty' => 'orderLineMinQty',
'order_line_max_qty' => 'orderLineMaxQty',
'min_order_price' => 'minOrderPrice',
'takeaway' => 'takeaway',
'delivery' => 'delivery',
'booking' => 'booking',
'image_url' => 'imageUrl',
'thumbnail_url' => 'thumbnailUrl',
'recipe_url' => 'recipeUrl',
'comment' => 'comment',
'daily_menu' => 'daily-menu',
'tasting_menu' => 'tasting-menu',
'for_group' => 'for-group',
'in_offer' => 'in-offer',
'people_from' => 'people-from',
'people_to' => 'people-to',
'tax_included' => 'tax-included',
'vip_club' => 'vip-club',
'modifiers' => 'modifiers'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
'created' => 'setCreated',
'updated' => 'setUpdated',
'name' => 'setName',
'description' => 'setDescription',
'formats' => 'setFormats',
'availability' => 'setAvailability',
'group_url' => 'setGroupUrl',
'price' => 'setPrice',
'currency' => 'setCurrency',
'guest_price' => 'setGuestPrice',
'order_line_min_qty' => 'setOrderLineMinQty',
'order_line_max_qty' => 'setOrderLineMaxQty',
'min_order_price' => 'setMinOrderPrice',
'takeaway' => 'setTakeaway',
'delivery' => 'setDelivery',
'booking' => 'setBooking',
'image_url' => 'setImageUrl',
'thumbnail_url' => 'setThumbnailUrl',
'recipe_url' => 'setRecipeUrl',
'comment' => 'setComment',
'daily_menu' => 'setDailyMenu',
'tasting_menu' => 'setTastingMenu',
'for_group' => 'setForGroup',
'in_offer' => 'setInOffer',
'people_from' => 'setPeopleFrom',
'people_to' => 'setPeopleTo',
'tax_included' => 'setTaxIncluded',
'vip_club' => 'setVipClub',
'modifiers' => 'setModifiers'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
'created' => 'getCreated',
'updated' => 'getUpdated',
'name' => 'getName',
'description' => 'getDescription',
'formats' => 'getFormats',
'availability' => 'getAvailability',
'group_url' => 'getGroupUrl',
'price' => 'getPrice',
'currency' => 'getCurrency',
'guest_price' => 'getGuestPrice',
'order_line_min_qty' => 'getOrderLineMinQty',
'order_line_max_qty' => 'getOrderLineMaxQty',
'min_order_price' => 'getMinOrderPrice',
'takeaway' => 'getTakeaway',
'delivery' => 'getDelivery',
'booking' => 'getBooking',
'image_url' => 'getImageUrl',
'thumbnail_url' => 'getThumbnailUrl',
'recipe_url' => 'getRecipeUrl',
'comment' => 'getComment',
'daily_menu' => 'getDailyMenu',
'tasting_menu' => 'getTastingMenu',
'for_group' => 'getForGroup',
'in_offer' => 'getInOffer',
'people_from' => 'getPeopleFrom',
'people_to' => 'getPeopleTo',
'tax_included' => 'getTaxIncluded',
'vip_club' => 'getVipClub',
'modifiers' => 'getModifiers'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['formats'] = isset($data['formats']) ? $data['formats'] : null;
        $this->container['availability'] = isset($data['availability']) ? $data['availability'] : null;
        $this->container['group_url'] = isset($data['group_url']) ? $data['group_url'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['guest_price'] = isset($data['guest_price']) ? $data['guest_price'] : null;
        $this->container['order_line_min_qty'] = isset($data['order_line_min_qty']) ? $data['order_line_min_qty'] : null;
        $this->container['order_line_max_qty'] = isset($data['order_line_max_qty']) ? $data['order_line_max_qty'] : null;
        $this->container['min_order_price'] = isset($data['min_order_price']) ? $data['min_order_price'] : null;
        $this->container['takeaway'] = isset($data['takeaway']) ? $data['takeaway'] : null;
        $this->container['delivery'] = isset($data['delivery']) ? $data['delivery'] : null;
        $this->container['booking'] = isset($data['booking']) ? $data['booking'] : null;
        $this->container['image_url'] = isset($data['image_url']) ? $data['image_url'] : null;
        $this->container['thumbnail_url'] = isset($data['thumbnail_url']) ? $data['thumbnail_url'] : null;
        $this->container['recipe_url'] = isset($data['recipe_url']) ? $data['recipe_url'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['daily_menu'] = isset($data['daily_menu']) ? $data['daily_menu'] : null;
        $this->container['tasting_menu'] = isset($data['tasting_menu']) ? $data['tasting_menu'] : null;
        $this->container['for_group'] = isset($data['for_group']) ? $data['for_group'] : null;
        $this->container['in_offer'] = isset($data['in_offer']) ? $data['in_offer'] : null;
        $this->container['people_from'] = isset($data['people_from']) ? $data['people_from'] : null;
        $this->container['people_to'] = isset($data['people_to']) ? $data['people_to'] : null;
        $this->container['tax_included'] = isset($data['tax_included']) ? $data['tax_included'] : null;
        $this->container['vip_club'] = isset($data['vip_club']) ? $data['vip_club'] : null;
        $this->container['modifiers'] = isset($data['modifiers']) ? $data['modifiers'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url Identificador Ãºnico segÃºn tipo en ae
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created Fecha de inserciÃ³n/creaciÃ³n
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param \DateTime $updated Fecha de actualizaciÃ³n
     *
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets name
     *
     * @return \Listae\Client\Model\Text[]
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param \Listae\Client\Model\Text[] $name Nombre del artÃ­culo/menÃº
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return \Listae\Client\Model\Text[]
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param \Listae\Client\Model\Text[] $description Breve descripciÃ³n del artÃ­culo. En caso del menÃº es el cuerpo del mismo.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets formats
     *
     * @return \Listae\Client\Model\CatalogItemFormats
     */
    public function getFormats()
    {
        return $this->container['formats'];
    }

    /**
     * Sets formats
     *
     * @param \Listae\Client\Model\CatalogItemFormats $formats formats
     *
     * @return $this
     */
    public function setFormats($formats)
    {
        $this->container['formats'] = $formats;

        return $this;
    }

    /**
     * Gets availability
     *
     * @return \Listae\Client\Model\AgendaBase
     */
    public function getAvailability()
    {
        return $this->container['availability'];
    }

    /**
     * Sets availability
     *
     * @param \Listae\Client\Model\AgendaBase $availability availability
     *
     * @return $this
     */
    public function setAvailability($availability)
    {
        $this->container['availability'] = $availability;

        return $this;
    }

    /**
     * Gets group_url
     *
     * @return string
     */
    public function getGroupUrl()
    {
        return $this->container['group_url'];
    }

    /**
     * Sets group_url
     *
     * @param string $group_url Id del grupo de catalogo padre
     *
     * @return $this
     */
    public function setGroupUrl($group_url)
    {
        $this->container['group_url'] = $group_url;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float $price Precio del artÃ­culo/menÃº por unidad (o comensal)
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency CÃ³digo de moneda en la que se expresan el precio del artÃ­culo (EUR, USD, ...)
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets guest_price
     *
     * @return int
     */
    public function getGuestPrice()
    {
        return $this->container['guest_price'];
    }

    /**
     * Sets guest_price
     *
     * @param int $guest_price Numero de comensales a los que se refiere el precio
     *
     * @return $this
     */
    public function setGuestPrice($guest_price)
    {
        $this->container['guest_price'] = $guest_price;

        return $this;
    }

    /**
     * Gets order_line_min_qty
     *
     * @return int
     */
    public function getOrderLineMinQty()
    {
        return $this->container['order_line_min_qty'];
    }

    /**
     * Sets order_line_min_qty
     *
     * @param int $order_line_min_qty NÃºmero mÃ­nimo de articulos por linea de pedido
     *
     * @return $this
     */
    public function setOrderLineMinQty($order_line_min_qty)
    {
        $this->container['order_line_min_qty'] = $order_line_min_qty;

        return $this;
    }

    /**
     * Gets order_line_max_qty
     *
     * @return int
     */
    public function getOrderLineMaxQty()
    {
        return $this->container['order_line_max_qty'];
    }

    /**
     * Sets order_line_max_qty
     *
     * @param int $order_line_max_qty NÃºmero maximo de articulos por linea de pedido
     *
     * @return $this
     */
    public function setOrderLineMaxQty($order_line_max_qty)
    {
        $this->container['order_line_max_qty'] = $order_line_max_qty;

        return $this;
    }

    /**
     * Gets min_order_price
     *
     * @return float
     */
    public function getMinOrderPrice()
    {
        return $this->container['min_order_price'];
    }

    /**
     * Sets min_order_price
     *
     * @param float $min_order_price Precio minimo de un pedido con el artÃ­culo/menÃº
     *
     * @return $this
     */
    public function setMinOrderPrice($min_order_price)
    {
        $this->container['min_order_price'] = $min_order_price;

        return $this;
    }

    /**
     * Gets takeaway
     *
     * @return bool
     */
    public function getTakeaway()
    {
        return $this->container['takeaway'];
    }

    /**
     * Sets takeaway
     *
     * @param bool $takeaway Si estÃ¡ disponible para hacer pedido para recoger o no
     *
     * @return $this
     */
    public function setTakeaway($takeaway)
    {
        $this->container['takeaway'] = $takeaway;

        return $this;
    }

    /**
     * Gets delivery
     *
     * @return bool
     */
    public function getDelivery()
    {
        return $this->container['delivery'];
    }

    /**
     * Sets delivery
     *
     * @param bool $delivery Si estÃ¡ disponible para hacer pedido para llevar o no
     *
     * @return $this
     */
    public function setDelivery($delivery)
    {
        $this->container['delivery'] = $delivery;

        return $this;
    }

    /**
     * Gets booking
     *
     * @return bool
     */
    public function getBooking()
    {
        return $this->container['booking'];
    }

    /**
     * Sets booking
     *
     * @param bool $booking Si estÃ¡ disponible para reservar o no
     *
     * @return $this
     */
    public function setBooking($booking)
    {
        $this->container['booking'] = $booking;

        return $this;
    }

    /**
     * Gets image_url
     *
     * @return string
     */
    public function getImageUrl()
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     *
     * @param string $image_url URL a la imagen destacada del artÃ­culo/menu
     *
     * @return $this
     */
    public function setImageUrl($image_url)
    {
        $this->container['image_url'] = $image_url;

        return $this;
    }

    /**
     * Gets thumbnail_url
     *
     * @return string
     */
    public function getThumbnailUrl()
    {
        return $this->container['thumbnail_url'];
    }

    /**
     * Sets thumbnail_url
     *
     * @param string $thumbnail_url URL a la miniatura de la imagen destacada del artÃ­culo/menu
     *
     * @return $this
     */
    public function setThumbnailUrl($thumbnail_url)
    {
        $this->container['thumbnail_url'] = $thumbnail_url;

        return $this;
    }

    /**
     * Gets recipe_url
     *
     * @return string
     */
    public function getRecipeUrl()
    {
        return $this->container['recipe_url'];
    }

    /**
     * Sets recipe_url
     *
     * @param string $recipe_url URL a la receta del artÃ­culo/menu
     *
     * @return $this
     */
    public function setRecipeUrl($recipe_url)
    {
        $this->container['recipe_url'] = $recipe_url;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return \Listae\Client\Model\Text[]
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param \Listae\Client\Model\Text[] $comment Observaciones del menÃº
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets daily_menu
     *
     * @return bool
     */
    public function getDailyMenu()
    {
        return $this->container['daily_menu'];
    }

    /**
     * Sets daily_menu
     *
     * @param bool $daily_menu Si se trata de un menÃº diario o no
     *
     * @return $this
     */
    public function setDailyMenu($daily_menu)
    {
        $this->container['daily_menu'] = $daily_menu;

        return $this;
    }

    /**
     * Gets tasting_menu
     *
     * @return bool
     */
    public function getTastingMenu()
    {
        return $this->container['tasting_menu'];
    }

    /**
     * Sets tasting_menu
     *
     * @param bool $tasting_menu Si se trata de un menÃº degustaciÃ³n o no
     *
     * @return $this
     */
    public function setTastingMenu($tasting_menu)
    {
        $this->container['tasting_menu'] = $tasting_menu;

        return $this;
    }

    /**
     * Gets for_group
     *
     * @return bool
     */
    public function getForGroup()
    {
        return $this->container['for_group'];
    }

    /**
     * Sets for_group
     *
     * @param bool $for_group Si se trata de un menÃº recomendado para grupos o no
     *
     * @return $this
     */
    public function setForGroup($for_group)
    {
        $this->container['for_group'] = $for_group;

        return $this;
    }

    /**
     * Gets in_offer
     *
     * @return bool
     */
    public function getInOffer()
    {
        return $this->container['in_offer'];
    }

    /**
     * Sets in_offer
     *
     * @param bool $in_offer Si se trata de un menÃº en oferta o no
     *
     * @return $this
     */
    public function setInOffer($in_offer)
    {
        $this->container['in_offer'] = $in_offer;

        return $this;
    }

    /**
     * Gets people_from
     *
     * @return int
     */
    public function getPeopleFrom()
    {
        return $this->container['people_from'];
    }

    /**
     * Sets people_from
     *
     * @param int $people_from NÃºmero mÃ­nimo de personas para poder solicitar el menÃº
     *
     * @return $this
     */
    public function setPeopleFrom($people_from)
    {
        $this->container['people_from'] = $people_from;

        return $this;
    }

    /**
     * Gets people_to
     *
     * @return int
     */
    public function getPeopleTo()
    {
        return $this->container['people_to'];
    }

    /**
     * Sets people_to
     *
     * @param int $people_to NÃºmero mÃ¡ximo de personas para poder solicitar el menÃº
     *
     * @return $this
     */
    public function setPeopleTo($people_to)
    {
        $this->container['people_to'] = $people_to;

        return $this;
    }

    /**
     * Gets tax_included
     *
     * @return bool
     */
    public function getTaxIncluded()
    {
        return $this->container['tax_included'];
    }

    /**
     * Sets tax_included
     *
     * @param bool $tax_included Si el precio tiene incluidos los impuestos
     *
     * @return $this
     */
    public function setTaxIncluded($tax_included)
    {
        $this->container['tax_included'] = $tax_included;

        return $this;
    }

    /**
     * Gets vip_club
     *
     * @return bool
     */
    public function getVipClub()
    {
        return $this->container['vip_club'];
    }

    /**
     * Sets vip_club
     *
     * @param bool $vip_club Si es exclusivo de los socios VIP del negocio o no
     *
     * @return $this
     */
    public function setVipClub($vip_club)
    {
        $this->container['vip_club'] = $vip_club;

        return $this;
    }

    /**
     * Gets modifiers
     *
     * @return \Listae\Client\Model\CatalogItemModifier[]
     */
    public function getModifiers()
    {
        return $this->container['modifiers'];
    }

    /**
     * Sets modifiers
     *
     * @param \Listae\Client\Model\CatalogItemModifier[] $modifiers Lista de modificadores particulares del producto
     *
     * @return $this
     */
    public function setModifiers($modifiers)
    {
        $this->container['modifiers'] = $modifiers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
