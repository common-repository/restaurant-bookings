<?php
/**
 * Offer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Listae\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * listae API 2.0
 *
 * DocumentaciÃ³n de los servicios REST de listae
 *
 * OpenAPI spec version: 2.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Listae\Client\Model;

use \ArrayAccess;
use \Listae\Client\ObjectSerializer;

/**
 * Offer Class Doc Comment
 *
 * @category Class
 * @package  Listae\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Offer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Offer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
'benefits' => '\Listae\Client\Model\OfferBenefit[]',
'conditions' => '\Listae\Client\Model\OfferCondition[]',
'offer_code' => 'string',
'business' => 'string',
'offer_type' => 'string',
'title' => 'string',
'description' => 'string',
'description_condition' => 'string',
'visibility_type' => 'string',
'total_qty' => 'int',
'consumed_qty' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
'benefits' => null,
'conditions' => null,
'offer_code' => null,
'business' => null,
'offer_type' => null,
'title' => null,
'description' => null,
'description_condition' => null,
'visibility_type' => null,
'total_qty' => null,
'consumed_qty' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
'benefits' => 'benefits',
'conditions' => 'conditions',
'offer_code' => 'offerCode',
'business' => 'business',
'offer_type' => 'offerType',
'title' => 'title',
'description' => 'description',
'description_condition' => 'descriptionCondition',
'visibility_type' => 'visibilityType',
'total_qty' => 'totalQty',
'consumed_qty' => 'consumedQty'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
'benefits' => 'setBenefits',
'conditions' => 'setConditions',
'offer_code' => 'setOfferCode',
'business' => 'setBusiness',
'offer_type' => 'setOfferType',
'title' => 'setTitle',
'description' => 'setDescription',
'description_condition' => 'setDescriptionCondition',
'visibility_type' => 'setVisibilityType',
'total_qty' => 'setTotalQty',
'consumed_qty' => 'setConsumedQty'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
'benefits' => 'getBenefits',
'conditions' => 'getConditions',
'offer_code' => 'getOfferCode',
'business' => 'getBusiness',
'offer_type' => 'getOfferType',
'title' => 'getTitle',
'description' => 'getDescription',
'description_condition' => 'getDescriptionCondition',
'visibility_type' => 'getVisibilityType',
'total_qty' => 'getTotalQty',
'consumed_qty' => 'getConsumedQty'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['benefits'] = isset($data['benefits']) ? $data['benefits'] : null;
        $this->container['conditions'] = isset($data['conditions']) ? $data['conditions'] : null;
        $this->container['offer_code'] = isset($data['offer_code']) ? $data['offer_code'] : null;
        $this->container['business'] = isset($data['business']) ? $data['business'] : null;
        $this->container['offer_type'] = isset($data['offer_type']) ? $data['offer_type'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['description_condition'] = isset($data['description_condition']) ? $data['description_condition'] : null;
        $this->container['visibility_type'] = isset($data['visibility_type']) ? $data['visibility_type'] : null;
        $this->container['total_qty'] = isset($data['total_qty']) ? $data['total_qty'] : null;
        $this->container['consumed_qty'] = isset($data['consumed_qty']) ? $data['consumed_qty'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url Identificador de la oferta
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets benefits
     *
     * @return \Listae\Client\Model\OfferBenefit[]
     */
    public function getBenefits()
    {
        return $this->container['benefits'];
    }

    /**
     * Sets benefits
     *
     * @param \Listae\Client\Model\OfferBenefit[] $benefits Lista de beneficios que se aplican en la oferta
     *
     * @return $this
     */
    public function setBenefits($benefits)
    {
        $this->container['benefits'] = $benefits;

        return $this;
    }

    /**
     * Gets conditions
     *
     * @return \Listae\Client\Model\OfferCondition[]
     */
    public function getConditions()
    {
        return $this->container['conditions'];
    }

    /**
     * Sets conditions
     *
     * @param \Listae\Client\Model\OfferCondition[] $conditions Lista de condiciones para que se apliquen los beneficios en la oferta
     *
     * @return $this
     */
    public function setConditions($conditions)
    {
        $this->container['conditions'] = $conditions;

        return $this;
    }

    /**
     * Gets offer_code
     *
     * @return string
     */
    public function getOfferCode()
    {
        return $this->container['offer_code'];
    }

    /**
     * Sets offer_code
     *
     * @param string $offer_code Codigo de la oferta
     *
     * @return $this
     */
    public function setOfferCode($offer_code)
    {
        $this->container['offer_code'] = $offer_code;

        return $this;
    }

    /**
     * Gets business
     *
     * @return string
     */
    public function getBusiness()
    {
        return $this->container['business'];
    }

    /**
     * Sets business
     *
     * @param string $business Identificador de negocio propietario de la oferta
     *
     * @return $this
     */
    public function setBusiness($business)
    {
        $this->container['business'] = $business;

        return $this;
    }

    /**
     * Gets offer_type
     *
     * @return string
     */
    public function getOfferType()
    {
        return $this->container['offer_type'];
    }

    /**
     * Sets offer_type
     *
     * @param string $offer_type Define como se aplican los beneficios, si es de forma global al pedido o solo para determinadas lineas de pedido
     *
     * @return $this
     */
    public function setOfferType($offer_type)
    {
        $this->container['offer_type'] = $offer_type;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title Nombre de la oferta
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Descripcion de la oferta (opcional)
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets description_condition
     *
     * @return string
     */
    public function getDescriptionCondition()
    {
        return $this->container['description_condition'];
    }

    /**
     * Sets description_condition
     *
     * @param string $description_condition Descripcion de las condiciones de la oferta (opcional)
     *
     * @return $this
     */
    public function setDescriptionCondition($description_condition)
    {
        $this->container['description_condition'] = $description_condition;

        return $this;
    }

    /**
     * Gets visibility_type
     *
     * @return string
     */
    public function getVisibilityType()
    {
        return $this->container['visibility_type'];
    }

    /**
     * Sets visibility_type
     *
     * @param string $visibility_type Visibilidad de la oferta
     *
     * @return $this
     */
    public function setVisibilityType($visibility_type)
    {
        $this->container['visibility_type'] = $visibility_type;

        return $this;
    }

    /**
     * Gets total_qty
     *
     * @return int
     */
    public function getTotalQty()
    {
        return $this->container['total_qty'];
    }

    /**
     * Sets total_qty
     *
     * @param int $total_qty Cantidad total de ofertas disponibles para aplicar (opcional)
     *
     * @return $this
     */
    public function setTotalQty($total_qty)
    {
        $this->container['total_qty'] = $total_qty;

        return $this;
    }

    /**
     * Gets consumed_qty
     *
     * @return int
     */
    public function getConsumedQty()
    {
        return $this->container['consumed_qty'];
    }

    /**
     * Sets consumed_qty
     *
     * @param int $consumed_qty Cantidad total de ofertas consumidas y ya aplicadas (opcional)
     *
     * @return $this
     */
    public function setConsumedQty($consumed_qty)
    {
        $this->container['consumed_qty'] = $consumed_qty;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
