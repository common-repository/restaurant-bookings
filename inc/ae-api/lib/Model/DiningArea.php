<?php
/**
 * DiningArea
 *
 * PHP version 5
 *
 * @category Class
 * @package  Listae\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * listae API 2.0
 *
 * Documentación de los servicios REST de listae
 *
 * OpenAPI spec version: 2.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Listae\Client\Model;

use \ArrayAccess;
use \Listae\Client\ObjectSerializer;

/**
 * DiningArea Class Doc Comment
 *
 * @category Class
 * @package  Listae\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DiningArea implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DiningArea';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
'created' => '\DateTime',
'updated' => '\DateTime',
'name' => '\Listae\Client\Model\Text[]',
'description' => '\Listae\Client\Model\Text[]',
'type' => 'string',
'table' => 'int',
'people_from' => 'int',
'people_to' => 'int',
'max_capacity' => 'int',
'bookable' => 'bool',
'takeaway' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
'created' => 'date-time',
'updated' => 'date-time',
'name' => null,
'description' => null,
'type' => null,
'table' => 'int32',
'people_from' => 'int32',
'people_to' => 'int32',
'max_capacity' => 'int32',
'bookable' => null,
'takeaway' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
'created' => 'created',
'updated' => 'updated',
'name' => 'name',
'description' => 'description',
'type' => 'type',
'table' => 'table',
'people_from' => 'people-from',
'people_to' => 'people-to',
'max_capacity' => 'max-capacity',
'bookable' => 'bookable',
'takeaway' => 'takeaway'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
'created' => 'setCreated',
'updated' => 'setUpdated',
'name' => 'setName',
'description' => 'setDescription',
'type' => 'setType',
'table' => 'setTable',
'people_from' => 'setPeopleFrom',
'people_to' => 'setPeopleTo',
'max_capacity' => 'setMaxCapacity',
'bookable' => 'setBookable',
'takeaway' => 'setTakeaway'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
'created' => 'getCreated',
'updated' => 'getUpdated',
'name' => 'getName',
'description' => 'getDescription',
'type' => 'getType',
'table' => 'getTable',
'people_from' => 'getPeopleFrom',
'people_to' => 'getPeopleTo',
'max_capacity' => 'getMaxCapacity',
'bookable' => 'getBookable',
'takeaway' => 'getTakeaway'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_MAIN = 'main';
const TYPE_TERRACE = 'terrace';
const TYPE_VIP_ROOM = 'vip-room';
const TYPE_HALL = 'hall';
const TYPE_OTHER = 'other';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_MAIN,
self::TYPE_TERRACE,
self::TYPE_VIP_ROOM,
self::TYPE_HALL,
self::TYPE_OTHER,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['table'] = isset($data['table']) ? $data['table'] : null;
        $this->container['people_from'] = isset($data['people_from']) ? $data['people_from'] : null;
        $this->container['people_to'] = isset($data['people_to']) ? $data['people_to'] : null;
        $this->container['max_capacity'] = isset($data['max_capacity']) ? $data['max_capacity'] : null;
        $this->container['bookable'] = isset($data['bookable']) ? $data['bookable'] : null;
        $this->container['takeaway'] = isset($data['takeaway']) ? $data['takeaway'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url Identificador único según tipo en ae
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created Fecha de inserción/creación
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param \DateTime $updated Fecha de actualización
     *
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets name
     *
     * @return \Listae\Client\Model\Text[]
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param \Listae\Client\Model\Text[] $name Nombre de la sala/zona del restaurante
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return \Listae\Client\Model\Text[]
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param \Listae\Client\Model\Text[] $description Breve descripción de la sala/zona del restaurante
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Tipo de sala/zona
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets table
     *
     * @return int
     */
    public function getTable()
    {
        return $this->container['table'];
    }

    /**
     * Sets table
     *
     * @param int $table Número de mesas en la zona/sala
     *
     * @return $this
     */
    public function setTable($table)
    {
        $this->container['table'] = $table;

        return $this;
    }

    /**
     * Gets people_from
     *
     * @return int
     */
    public function getPeopleFrom()
    {
        return $this->container['people_from'];
    }

    /**
     * Sets people_from
     *
     * @param int $people_from Número mínimo de personas que se requieren para reservar la zona/sala
     *
     * @return $this
     */
    public function setPeopleFrom($people_from)
    {
        $this->container['people_from'] = $people_from;

        return $this;
    }

    /**
     * Gets people_to
     *
     * @return int
     */
    public function getPeopleTo()
    {
        return $this->container['people_to'];
    }

    /**
     * Sets people_to
     *
     * @param int $people_to Número máximo de personas que se requieren para reservar la zona/sala
     *
     * @return $this
     */
    public function setPeopleTo($people_to)
    {
        $this->container['people_to'] = $people_to;

        return $this;
    }

    /**
     * Gets max_capacity
     *
     * @return int
     */
    public function getMaxCapacity()
    {
        return $this->container['max_capacity'];
    }

    /**
     * Sets max_capacity
     *
     * @param int $max_capacity Capacidad máximo de personas que tiene la zona/sala
     *
     * @return $this
     */
    public function setMaxCapacity($max_capacity)
    {
        $this->container['max_capacity'] = $max_capacity;

        return $this;
    }

    /**
     * Gets bookable
     *
     * @return bool
     */
    public function getBookable()
    {
        return $this->container['bookable'];
    }

    /**
     * Sets bookable
     *
     * @param bool $bookable Si se puede reservar en la zona
     *
     * @return $this
     */
    public function setBookable($bookable)
    {
        $this->container['bookable'] = $bookable;

        return $this;
    }

    /**
     * Gets takeaway
     *
     * @return bool
     */
    public function getTakeaway()
    {
        return $this->container['takeaway'];
    }

    /**
     * Sets takeaway
     *
     * @param bool $takeaway Si se usa como zona para los pedidos de comida para llevar
     *
     * @return $this
     */
    public function setTakeaway($takeaway)
    {
        $this->container['takeaway'] = $takeaway;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
