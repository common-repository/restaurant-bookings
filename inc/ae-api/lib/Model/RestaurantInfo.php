<?php
/**
 * RestaurantInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Listae\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * listae API 2.0
 *
 * Documentación de los servicios REST de listae
 *
 * OpenAPI spec version: 2.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Listae\Client\Model;

use \ArrayAccess;
use \Listae\Client\ObjectSerializer;

/**
 * RestaurantInfo Class Doc Comment
 *
 * @category Class
 * @description Clase base con la información básica de un restaurante
 * @package  Listae\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RestaurantInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RestaurantInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
'created' => '\DateTime',
'updated' => '\DateTime',
'name' => 'string',
'address' => 'string',
'town' => 'string',
'region' => 'string',
'country' => 'string',
'categories' => '\Listae\Client\Model\Categories',
'tags' => 'string',
'main_image' => '\Listae\Client\Model\Image',
'stats' => '\Listae\Client\Model\Stats',
'catalogs' => '\Listae\Client\Model\CatalogInfoList',
'phone' => '\Listae\Client\Model\Phone',
'links' => '\Listae\Client\Model\LinkList',
'distance' => '\Listae\Client\Model\DistanceFrom',
'last_review' => '\Listae\Client\Model\Review',
'opening' => '\Listae\Client\Model\AgendaBase',
'featured_image' => '\Listae\Client\Model\Image',
'country_code' => 'string',
'web' => 'string',
'map' => 'bool',
'email_contact_enabled' => 'bool',
'geocoords' => 'string',
'price' => 'float',
'currency' => 'string',
'posts_count' => 'int',
'closed' => 'bool',
'main_map_link' => 'string',
'alt_booking_link' => 'string',
'alt_catalog_link' => 'string',
'specialty' => '\Listae\Client\Model\Text[]',
'menus' => 'int',
'cartes' => 'int',
'bookings' => 'bool',
'bookings_r2' => 'bool',
'takeaway' => 'bool',
'takeaway_min_order' => 'float',
'takeaway_min_time_in_advance' => 'int',
'takeaway_max_time_in_advance' => 'int',
'delivery' => 'bool',
'delivery_min_order' => 'float',
'delivery_min_time_in_advance' => 'int',
'delivery_max_time_in_advance' => 'int',
'elaboration_time' => 'int',
'time_interval' => 'int',
'delivery_time' => 'int',
'coupon' => 'bool',
'vip_club_name' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
'created' => 'date-time',
'updated' => 'date-time',
'name' => null,
'address' => null,
'town' => null,
'region' => null,
'country' => null,
'categories' => null,
'tags' => null,
'main_image' => null,
'stats' => null,
'catalogs' => null,
'phone' => null,
'links' => null,
'distance' => null,
'last_review' => null,
'opening' => null,
'featured_image' => null,
'country_code' => null,
'web' => null,
'map' => null,
'email_contact_enabled' => null,
'geocoords' => null,
'price' => 'float',
'currency' => null,
'posts_count' => 'int64',
'closed' => null,
'main_map_link' => null,
'alt_booking_link' => null,
'alt_catalog_link' => null,
'specialty' => null,
'menus' => 'int32',
'cartes' => 'int32',
'bookings' => null,
'bookings_r2' => null,
'takeaway' => null,
'takeaway_min_order' => 'float',
'takeaway_min_time_in_advance' => 'int64',
'takeaway_max_time_in_advance' => 'int64',
'delivery' => null,
'delivery_min_order' => 'float',
'delivery_min_time_in_advance' => 'int64',
'delivery_max_time_in_advance' => 'int64',
'elaboration_time' => 'int64',
'time_interval' => 'int64',
'delivery_time' => 'int64',
'coupon' => null,
'vip_club_name' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
'created' => 'created',
'updated' => 'updated',
'name' => 'name',
'address' => 'address',
'town' => 'town',
'region' => 'region',
'country' => 'country',
'categories' => 'categories',
'tags' => 'tags',
'main_image' => 'main-image',
'stats' => 'stats',
'catalogs' => 'catalogs',
'phone' => 'phone',
'links' => 'links',
'distance' => 'distance',
'last_review' => 'lastReview',
'opening' => 'opening',
'featured_image' => 'featuredImage',
'country_code' => 'country-code',
'web' => 'web',
'map' => 'map',
'email_contact_enabled' => 'email-contact-enabled',
'geocoords' => 'geocoords',
'price' => 'price',
'currency' => 'currency',
'posts_count' => 'posts-count',
'closed' => 'closed',
'main_map_link' => 'mainMapLink',
'alt_booking_link' => 'altBookingLink',
'alt_catalog_link' => 'altCatalogLink',
'specialty' => 'specialty',
'menus' => 'menus',
'cartes' => 'cartes',
'bookings' => 'bookings',
'bookings_r2' => 'bookingsR2',
'takeaway' => 'takeaway',
'takeaway_min_order' => 'takeawayMinOrder',
'takeaway_min_time_in_advance' => 'takeawayMinTimeInAdvance',
'takeaway_max_time_in_advance' => 'takeawayMaxTimeInAdvance',
'delivery' => 'delivery',
'delivery_min_order' => 'deliveryMinOrder',
'delivery_min_time_in_advance' => 'deliveryMinTimeInAdvance',
'delivery_max_time_in_advance' => 'deliveryMaxTimeInAdvance',
'elaboration_time' => 'elaborationTime',
'time_interval' => 'timeInterval',
'delivery_time' => 'deliveryTime',
'coupon' => 'coupon',
'vip_club_name' => 'vip-club-name'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
'created' => 'setCreated',
'updated' => 'setUpdated',
'name' => 'setName',
'address' => 'setAddress',
'town' => 'setTown',
'region' => 'setRegion',
'country' => 'setCountry',
'categories' => 'setCategories',
'tags' => 'setTags',
'main_image' => 'setMainImage',
'stats' => 'setStats',
'catalogs' => 'setCatalogs',
'phone' => 'setPhone',
'links' => 'setLinks',
'distance' => 'setDistance',
'last_review' => 'setLastReview',
'opening' => 'setOpening',
'featured_image' => 'setFeaturedImage',
'country_code' => 'setCountryCode',
'web' => 'setWeb',
'map' => 'setMap',
'email_contact_enabled' => 'setEmailContactEnabled',
'geocoords' => 'setGeocoords',
'price' => 'setPrice',
'currency' => 'setCurrency',
'posts_count' => 'setPostsCount',
'closed' => 'setClosed',
'main_map_link' => 'setMainMapLink',
'alt_booking_link' => 'setAltBookingLink',
'alt_catalog_link' => 'setAltCatalogLink',
'specialty' => 'setSpecialty',
'menus' => 'setMenus',
'cartes' => 'setCartes',
'bookings' => 'setBookings',
'bookings_r2' => 'setBookingsR2',
'takeaway' => 'setTakeaway',
'takeaway_min_order' => 'setTakeawayMinOrder',
'takeaway_min_time_in_advance' => 'setTakeawayMinTimeInAdvance',
'takeaway_max_time_in_advance' => 'setTakeawayMaxTimeInAdvance',
'delivery' => 'setDelivery',
'delivery_min_order' => 'setDeliveryMinOrder',
'delivery_min_time_in_advance' => 'setDeliveryMinTimeInAdvance',
'delivery_max_time_in_advance' => 'setDeliveryMaxTimeInAdvance',
'elaboration_time' => 'setElaborationTime',
'time_interval' => 'setTimeInterval',
'delivery_time' => 'setDeliveryTime',
'coupon' => 'setCoupon',
'vip_club_name' => 'setVipClubName'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
'created' => 'getCreated',
'updated' => 'getUpdated',
'name' => 'getName',
'address' => 'getAddress',
'town' => 'getTown',
'region' => 'getRegion',
'country' => 'getCountry',
'categories' => 'getCategories',
'tags' => 'getTags',
'main_image' => 'getMainImage',
'stats' => 'getStats',
'catalogs' => 'getCatalogs',
'phone' => 'getPhone',
'links' => 'getLinks',
'distance' => 'getDistance',
'last_review' => 'getLastReview',
'opening' => 'getOpening',
'featured_image' => 'getFeaturedImage',
'country_code' => 'getCountryCode',
'web' => 'getWeb',
'map' => 'getMap',
'email_contact_enabled' => 'getEmailContactEnabled',
'geocoords' => 'getGeocoords',
'price' => 'getPrice',
'currency' => 'getCurrency',
'posts_count' => 'getPostsCount',
'closed' => 'getClosed',
'main_map_link' => 'getMainMapLink',
'alt_booking_link' => 'getAltBookingLink',
'alt_catalog_link' => 'getAltCatalogLink',
'specialty' => 'getSpecialty',
'menus' => 'getMenus',
'cartes' => 'getCartes',
'bookings' => 'getBookings',
'bookings_r2' => 'getBookingsR2',
'takeaway' => 'getTakeaway',
'takeaway_min_order' => 'getTakeawayMinOrder',
'takeaway_min_time_in_advance' => 'getTakeawayMinTimeInAdvance',
'takeaway_max_time_in_advance' => 'getTakeawayMaxTimeInAdvance',
'delivery' => 'getDelivery',
'delivery_min_order' => 'getDeliveryMinOrder',
'delivery_min_time_in_advance' => 'getDeliveryMinTimeInAdvance',
'delivery_max_time_in_advance' => 'getDeliveryMaxTimeInAdvance',
'elaboration_time' => 'getElaborationTime',
'time_interval' => 'getTimeInterval',
'delivery_time' => 'getDeliveryTime',
'coupon' => 'getCoupon',
'vip_club_name' => 'getVipClubName'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['town'] = isset($data['town']) ? $data['town'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['categories'] = isset($data['categories']) ? $data['categories'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['main_image'] = isset($data['main_image']) ? $data['main_image'] : null;
        $this->container['stats'] = isset($data['stats']) ? $data['stats'] : null;
        $this->container['catalogs'] = isset($data['catalogs']) ? $data['catalogs'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['distance'] = isset($data['distance']) ? $data['distance'] : null;
        $this->container['last_review'] = isset($data['last_review']) ? $data['last_review'] : null;
        $this->container['opening'] = isset($data['opening']) ? $data['opening'] : null;
        $this->container['featured_image'] = isset($data['featured_image']) ? $data['featured_image'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['web'] = isset($data['web']) ? $data['web'] : null;
        $this->container['map'] = isset($data['map']) ? $data['map'] : null;
        $this->container['email_contact_enabled'] = isset($data['email_contact_enabled']) ? $data['email_contact_enabled'] : null;
        $this->container['geocoords'] = isset($data['geocoords']) ? $data['geocoords'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['posts_count'] = isset($data['posts_count']) ? $data['posts_count'] : null;
        $this->container['closed'] = isset($data['closed']) ? $data['closed'] : null;
        $this->container['main_map_link'] = isset($data['main_map_link']) ? $data['main_map_link'] : null;
        $this->container['alt_booking_link'] = isset($data['alt_booking_link']) ? $data['alt_booking_link'] : null;
        $this->container['alt_catalog_link'] = isset($data['alt_catalog_link']) ? $data['alt_catalog_link'] : null;
        $this->container['specialty'] = isset($data['specialty']) ? $data['specialty'] : null;
        $this->container['menus'] = isset($data['menus']) ? $data['menus'] : null;
        $this->container['cartes'] = isset($data['cartes']) ? $data['cartes'] : null;
        $this->container['bookings'] = isset($data['bookings']) ? $data['bookings'] : null;
        $this->container['bookings_r2'] = isset($data['bookings_r2']) ? $data['bookings_r2'] : null;
        $this->container['takeaway'] = isset($data['takeaway']) ? $data['takeaway'] : null;
        $this->container['takeaway_min_order'] = isset($data['takeaway_min_order']) ? $data['takeaway_min_order'] : null;
        $this->container['takeaway_min_time_in_advance'] = isset($data['takeaway_min_time_in_advance']) ? $data['takeaway_min_time_in_advance'] : null;
        $this->container['takeaway_max_time_in_advance'] = isset($data['takeaway_max_time_in_advance']) ? $data['takeaway_max_time_in_advance'] : null;
        $this->container['delivery'] = isset($data['delivery']) ? $data['delivery'] : null;
        $this->container['delivery_min_order'] = isset($data['delivery_min_order']) ? $data['delivery_min_order'] : null;
        $this->container['delivery_min_time_in_advance'] = isset($data['delivery_min_time_in_advance']) ? $data['delivery_min_time_in_advance'] : null;
        $this->container['delivery_max_time_in_advance'] = isset($data['delivery_max_time_in_advance']) ? $data['delivery_max_time_in_advance'] : null;
        $this->container['elaboration_time'] = isset($data['elaboration_time']) ? $data['elaboration_time'] : null;
        $this->container['time_interval'] = isset($data['time_interval']) ? $data['time_interval'] : null;
        $this->container['delivery_time'] = isset($data['delivery_time']) ? $data['delivery_time'] : null;
        $this->container['coupon'] = isset($data['coupon']) ? $data['coupon'] : null;
        $this->container['vip_club_name'] = isset($data['vip_club_name']) ? $data['vip_club_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url Identificador único según tipo en ae
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created Fecha de inserción/creación
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param \DateTime $updated Fecha de actualización
     *
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Nombre del negocio
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address Dirección del negocio
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets town
     *
     * @return string
     */
    public function getTown()
    {
        return $this->container['town'];
    }

    /**
     * Sets town
     *
     * @param string $town Población del negocio
     *
     * @return $this
     */
    public function setTown($town)
    {
        $this->container['town'] = $town;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region Región/Provincia/Estado del negocio
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country País del negocio
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return \Listae\Client\Model\Categories
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param \Listae\Client\Model\Categories $categories categories
     *
     * @return $this
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string $tags Lista de etiquetas separadas por comas
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets main_image
     *
     * @return \Listae\Client\Model\Image
     */
    public function getMainImage()
    {
        return $this->container['main_image'];
    }

    /**
     * Sets main_image
     *
     * @param \Listae\Client\Model\Image $main_image main_image
     *
     * @return $this
     */
    public function setMainImage($main_image)
    {
        $this->container['main_image'] = $main_image;

        return $this;
    }

    /**
     * Gets stats
     *
     * @return \Listae\Client\Model\Stats
     */
    public function getStats()
    {
        return $this->container['stats'];
    }

    /**
     * Sets stats
     *
     * @param \Listae\Client\Model\Stats $stats stats
     *
     * @return $this
     */
    public function setStats($stats)
    {
        $this->container['stats'] = $stats;

        return $this;
    }

    /**
     * Gets catalogs
     *
     * @return \Listae\Client\Model\CatalogInfoList
     */
    public function getCatalogs()
    {
        return $this->container['catalogs'];
    }

    /**
     * Sets catalogs
     *
     * @param \Listae\Client\Model\CatalogInfoList $catalogs catalogs
     *
     * @return $this
     */
    public function setCatalogs($catalogs)
    {
        $this->container['catalogs'] = $catalogs;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return \Listae\Client\Model\Phone
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param \Listae\Client\Model\Phone $phone phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \Listae\Client\Model\LinkList
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \Listae\Client\Model\LinkList $links links
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets distance
     *
     * @return \Listae\Client\Model\DistanceFrom
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     *
     * @param \Listae\Client\Model\DistanceFrom $distance distance
     *
     * @return $this
     */
    public function setDistance($distance)
    {
        $this->container['distance'] = $distance;

        return $this;
    }

    /**
     * Gets last_review
     *
     * @return \Listae\Client\Model\Review
     */
    public function getLastReview()
    {
        return $this->container['last_review'];
    }

    /**
     * Sets last_review
     *
     * @param \Listae\Client\Model\Review $last_review last_review
     *
     * @return $this
     */
    public function setLastReview($last_review)
    {
        $this->container['last_review'] = $last_review;

        return $this;
    }

    /**
     * Gets opening
     *
     * @return \Listae\Client\Model\AgendaBase
     */
    public function getOpening()
    {
        return $this->container['opening'];
    }

    /**
     * Sets opening
     *
     * @param \Listae\Client\Model\AgendaBase $opening opening
     *
     * @return $this
     */
    public function setOpening($opening)
    {
        $this->container['opening'] = $opening;

        return $this;
    }

    /**
     * Gets featured_image
     *
     * @return \Listae\Client\Model\Image
     */
    public function getFeaturedImage()
    {
        return $this->container['featured_image'];
    }

    /**
     * Sets featured_image
     *
     * @param \Listae\Client\Model\Image $featured_image featured_image
     *
     * @return $this
     */
    public function setFeaturedImage($featured_image)
    {
        $this->container['featured_image'] = $featured_image;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code Código del país del negocio
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets web
     *
     * @return string
     */
    public function getWeb()
    {
        return $this->container['web'];
    }

    /**
     * Sets web
     *
     * @param string $web URL a la página web del negocio
     *
     * @return $this
     */
    public function setWeb($web)
    {
        $this->container['web'] = $web;

        return $this;
    }

    /**
     * Gets map
     *
     * @return bool
     */
    public function getMap()
    {
        return $this->container['map'];
    }

    /**
     * Sets map
     *
     * @param bool $map Indica si el negocio está geoposicionado o no
     *
     * @return $this
     */
    public function setMap($map)
    {
        $this->container['map'] = $map;

        return $this;
    }

    /**
     * Gets email_contact_enabled
     *
     * @return bool
     */
    public function getEmailContactEnabled()
    {
        return $this->container['email_contact_enabled'];
    }

    /**
     * Sets email_contact_enabled
     *
     * @param bool $email_contact_enabled Indica si el negocio admite contactos a través de email
     *
     * @return $this
     */
    public function setEmailContactEnabled($email_contact_enabled)
    {
        $this->container['email_contact_enabled'] = $email_contact_enabled;

        return $this;
    }

    /**
     * Gets geocoords
     *
     * @return string
     */
    public function getGeocoords()
    {
        return $this->container['geocoords'];
    }

    /**
     * Sets geocoords
     *
     * @param string $geocoords Geocordenadas del negocio separadas por coma (latitud,longitud)
     *
     * @return $this
     */
    public function setGeocoords($geocoords)
    {
        $this->container['geocoords'] = $geocoords;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float $price Precio medio sin bebida
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Código de moneda en la que se expresan el precio medio (EUR, USD, ...)
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets posts_count
     *
     * @return int
     */
    public function getPostsCount()
    {
        return $this->container['posts_count'];
    }

    /**
     * Sets posts_count
     *
     * @param int $posts_count Número de artículos publicados acerca del negocio
     *
     * @return $this
     */
    public function setPostsCount($posts_count)
    {
        $this->container['posts_count'] = $posts_count;

        return $this;
    }

    /**
     * Gets closed
     *
     * @return bool
     */
    public function getClosed()
    {
        return $this->container['closed'];
    }

    /**
     * Sets closed
     *
     * @param bool $closed Indica si el negocio está cerrado indefinidamente
     *
     * @return $this
     */
    public function setClosed($closed)
    {
        $this->container['closed'] = $closed;

        return $this;
    }

    /**
     * Gets main_map_link
     *
     * @return string
     */
    public function getMainMapLink()
    {
        return $this->container['main_map_link'];
    }

    /**
     * Sets main_map_link
     *
     * @param string $main_map_link URL a mapa alternativo (normalmente google maps para poner con iframe)
     *
     * @return $this
     */
    public function setMainMapLink($main_map_link)
    {
        $this->container['main_map_link'] = $main_map_link;

        return $this;
    }

    /**
     * Gets alt_booking_link
     *
     * @return string
     */
    public function getAltBookingLink()
    {
        return $this->container['alt_booking_link'];
    }

    /**
     * Sets alt_booking_link
     *
     * @param string $alt_booking_link URL a reservas de terceros
     *
     * @return $this
     */
    public function setAltBookingLink($alt_booking_link)
    {
        $this->container['alt_booking_link'] = $alt_booking_link;

        return $this;
    }

    /**
     * Gets alt_catalog_link
     *
     * @return string
     */
    public function getAltCatalogLink()
    {
        return $this->container['alt_catalog_link'];
    }

    /**
     * Sets alt_catalog_link
     *
     * @param string $alt_catalog_link URL a catalogos de terceros
     *
     * @return $this
     */
    public function setAltCatalogLink($alt_catalog_link)
    {
        $this->container['alt_catalog_link'] = $alt_catalog_link;

        return $this;
    }

    /**
     * Gets specialty
     *
     * @return \Listae\Client\Model\Text[]
     */
    public function getSpecialty()
    {
        return $this->container['specialty'];
    }

    /**
     * Sets specialty
     *
     * @param \Listae\Client\Model\Text[] $specialty Especialidades del negocio
     *
     * @return $this
     */
    public function setSpecialty($specialty)
    {
        $this->container['specialty'] = $specialty;

        return $this;
    }

    /**
     * Gets menus
     *
     * @return int
     */
    public function getMenus()
    {
        return $this->container['menus'];
    }

    /**
     * Sets menus
     *
     * @param int $menus Número de menús del negocio
     *
     * @return $this
     */
    public function setMenus($menus)
    {
        $this->container['menus'] = $menus;

        return $this;
    }

    /**
     * Gets cartes
     *
     * @return int
     */
    public function getCartes()
    {
        return $this->container['cartes'];
    }

    /**
     * Sets cartes
     *
     * @param int $cartes Número de cartas del negocio
     *
     * @return $this
     */
    public function setCartes($cartes)
    {
        $this->container['cartes'] = $cartes;

        return $this;
    }

    /**
     * Gets bookings
     *
     * @return bool
     */
    public function getBookings()
    {
        return $this->container['bookings'];
    }

    /**
     * Sets bookings
     *
     * @param bool $bookings Indica si el negocio admite reservas online o no
     *
     * @return $this
     */
    public function setBookings($bookings)
    {
        $this->container['bookings'] = $bookings;

        return $this;
    }

    /**
     * Gets bookings_r2
     *
     * @return bool
     */
    public function getBookingsR2()
    {
        return $this->container['bookings_r2'];
    }

    /**
     * Sets bookings_r2
     *
     * @param bool $bookings_r2 Indica si el negocio admite reservas online a través de listae o no
     *
     * @return $this
     */
    public function setBookingsR2($bookings_r2)
    {
        $this->container['bookings_r2'] = $bookings_r2;

        return $this;
    }

    /**
     * Gets takeaway
     *
     * @return bool
     */
    public function getTakeaway()
    {
        return $this->container['takeaway'];
    }

    /**
     * Sets takeaway
     *
     * @param bool $takeaway Indica si el negocio admite pedidos para recoger online o no
     *
     * @return $this
     */
    public function setTakeaway($takeaway)
    {
        $this->container['takeaway'] = $takeaway;

        return $this;
    }

    /**
     * Gets takeaway_min_order
     *
     * @return float
     */
    public function getTakeawayMinOrder()
    {
        return $this->container['takeaway_min_order'];
    }

    /**
     * Sets takeaway_min_order
     *
     * @param float $takeaway_min_order Precio mínimo para el pedido para recoger
     *
     * @return $this
     */
    public function setTakeawayMinOrder($takeaway_min_order)
    {
        $this->container['takeaway_min_order'] = $takeaway_min_order;

        return $this;
    }

    /**
     * Gets takeaway_min_time_in_advance
     *
     * @return int
     */
    public function getTakeawayMinTimeInAdvance()
    {
        return $this->container['takeaway_min_time_in_advance'];
    }

    /**
     * Sets takeaway_min_time_in_advance
     *
     * @param int $takeaway_min_time_in_advance Tiempo mínimo que necesita el negocio para poder preparar el pedido para recoger (expresado en minutos)
     *
     * @return $this
     */
    public function setTakeawayMinTimeInAdvance($takeaway_min_time_in_advance)
    {
        $this->container['takeaway_min_time_in_advance'] = $takeaway_min_time_in_advance;

        return $this;
    }

    /**
     * Gets takeaway_max_time_in_advance
     *
     * @return int
     */
    public function getTakeawayMaxTimeInAdvance()
    {
        return $this->container['takeaway_max_time_in_advance'];
    }

    /**
     * Sets takeaway_max_time_in_advance
     *
     * @param int $takeaway_max_time_in_advance Tiempo máximo  posible para poder realiza un pedido online para recoger (expresado en minutos)
     *
     * @return $this
     */
    public function setTakeawayMaxTimeInAdvance($takeaway_max_time_in_advance)
    {
        $this->container['takeaway_max_time_in_advance'] = $takeaway_max_time_in_advance;

        return $this;
    }

    /**
     * Gets delivery
     *
     * @return bool
     */
    public function getDelivery()
    {
        return $this->container['delivery'];
    }

    /**
     * Sets delivery
     *
     * @param bool $delivery Indica si el negocio admite pedidos para llevar online o no
     *
     * @return $this
     */
    public function setDelivery($delivery)
    {
        $this->container['delivery'] = $delivery;

        return $this;
    }

    /**
     * Gets delivery_min_order
     *
     * @return float
     */
    public function getDeliveryMinOrder()
    {
        return $this->container['delivery_min_order'];
    }

    /**
     * Sets delivery_min_order
     *
     * @param float $delivery_min_order Precio mínimo para el pedido para llevar
     *
     * @return $this
     */
    public function setDeliveryMinOrder($delivery_min_order)
    {
        $this->container['delivery_min_order'] = $delivery_min_order;

        return $this;
    }

    /**
     * Gets delivery_min_time_in_advance
     *
     * @return int
     */
    public function getDeliveryMinTimeInAdvance()
    {
        return $this->container['delivery_min_time_in_advance'];
    }

    /**
     * Sets delivery_min_time_in_advance
     *
     * @param int $delivery_min_time_in_advance Tiempo mínimo que necesita el negocio para poder preparar el pedido para llevar (expresado en minutos)
     *
     * @return $this
     */
    public function setDeliveryMinTimeInAdvance($delivery_min_time_in_advance)
    {
        $this->container['delivery_min_time_in_advance'] = $delivery_min_time_in_advance;

        return $this;
    }

    /**
     * Gets delivery_max_time_in_advance
     *
     * @return int
     */
    public function getDeliveryMaxTimeInAdvance()
    {
        return $this->container['delivery_max_time_in_advance'];
    }

    /**
     * Sets delivery_max_time_in_advance
     *
     * @param int $delivery_max_time_in_advance Tiempo máximo  posible para poder realiza un pedido online para llevar (expresado en minutos)
     *
     * @return $this
     */
    public function setDeliveryMaxTimeInAdvance($delivery_max_time_in_advance)
    {
        $this->container['delivery_max_time_in_advance'] = $delivery_max_time_in_advance;

        return $this;
    }

    /**
     * Gets elaboration_time
     *
     * @return int
     */
    public function getElaborationTime()
    {
        return $this->container['elaboration_time'];
    }

    /**
     * Sets elaboration_time
     *
     * @param int $elaboration_time Tiempo dedicado a la elaboracion del pedido. Necesario para calcular lo que tarda el pedido cuando se solicita asap.
     *
     * @return $this
     */
    public function setElaborationTime($elaboration_time)
    {
        $this->container['elaboration_time'] = $elaboration_time;

        return $this;
    }

    /**
     * Gets time_interval
     *
     * @return int
     */
    public function getTimeInterval()
    {
        return $this->container['time_interval'];
    }

    /**
     * Sets time_interval
     *
     * @param int $time_interval Intervalo de tiempo expresado en minutos en los que se divide las distintos turnos horarios para realizar los pedidos
     *
     * @return $this
     */
    public function setTimeInterval($time_interval)
    {
        $this->container['time_interval'] = $time_interval;

        return $this;
    }

    /**
     * Gets delivery_time
     *
     * @return int
     */
    public function getDeliveryTime()
    {
        return $this->container['delivery_time'];
    }

    /**
     * Sets delivery_time
     *
     * @param int $delivery_time Tiempo medio de reparto del pedido. Necesario para calcular lo que tarda el pedido en recibirse.
     *
     * @return $this
     */
    public function setDeliveryTime($delivery_time)
    {
        $this->container['delivery_time'] = $delivery_time;

        return $this;
    }

    /**
     * Gets coupon
     *
     * @return bool
     */
    public function getCoupon()
    {
        return $this->container['coupon'];
    }

    /**
     * Sets coupon
     *
     * @param bool $coupon Indica si el negocio tiene cupones o no
     *
     * @return $this
     */
    public function setCoupon($coupon)
    {
        $this->container['coupon'] = $coupon;

        return $this;
    }

    /**
     * Gets vip_club_name
     *
     * @return string
     */
    public function getVipClubName()
    {
        return $this->container['vip_club_name'];
    }

    /**
     * Sets vip_club_name
     *
     * @param string $vip_club_name Nombre del club VIP del negocio (si lo tiene)
     *
     * @return $this
     */
    public function setVipClubName($vip_club_name)
    {
        $this->container['vip_club_name'] = $vip_club_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
