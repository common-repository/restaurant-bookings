<?php
/**
 * Booking
 *
 * PHP version 5
 *
 * @category Class
 * @package  Listae\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * listae API 2.0
 *
 * DocumentaciÃ³n de los servicios REST de listae
 *
 * OpenAPI spec version: 2.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Listae\Client\Model;

use \ArrayAccess;
use \Listae\Client\ObjectSerializer;

/**
 * Booking Class Doc Comment
 *
 * @category Class
 * @package  Listae\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Booking implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Booking';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'booking_date' => '\DateTime',
'booking_time' => 'string',
'bookers' => 'int',
'coupon_code' => 'string',
'name' => 'string',
'email' => 'string',
'suscribe' => 'bool',
'reminder' => 'bool',
'comment' => 'string',
'state' => 'string',
'localizator' => 'string',
'cancel_comment' => 'string',
'confirmed_comment' => 'string',
'menu' => '\Listae\Client\Model\Menu',
'dining_area' => '\Listae\Client\Model\DiningArea',
'phone' => '\Listae\Client\Model\Phone'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'booking_date' => 'date',
'booking_time' => null,
'bookers' => 'int32',
'coupon_code' => null,
'name' => null,
'email' => null,
'suscribe' => null,
'reminder' => null,
'comment' => null,
'state' => null,
'localizator' => null,
'cancel_comment' => null,
'confirmed_comment' => null,
'menu' => null,
'dining_area' => null,
'phone' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'booking_date' => 'bookingDate',
'booking_time' => 'bookingTime',
'bookers' => 'bookers',
'coupon_code' => 'couponCode',
'name' => 'name',
'email' => 'email',
'suscribe' => 'suscribe',
'reminder' => 'reminder',
'comment' => 'comment',
'state' => 'state',
'localizator' => 'localizator',
'cancel_comment' => 'cancelComment',
'confirmed_comment' => 'confirmedComment',
'menu' => 'menu',
'dining_area' => 'diningArea',
'phone' => 'phone'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'booking_date' => 'setBookingDate',
'booking_time' => 'setBookingTime',
'bookers' => 'setBookers',
'coupon_code' => 'setCouponCode',
'name' => 'setName',
'email' => 'setEmail',
'suscribe' => 'setSuscribe',
'reminder' => 'setReminder',
'comment' => 'setComment',
'state' => 'setState',
'localizator' => 'setLocalizator',
'cancel_comment' => 'setCancelComment',
'confirmed_comment' => 'setConfirmedComment',
'menu' => 'setMenu',
'dining_area' => 'setDiningArea',
'phone' => 'setPhone'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'booking_date' => 'getBookingDate',
'booking_time' => 'getBookingTime',
'bookers' => 'getBookers',
'coupon_code' => 'getCouponCode',
'name' => 'getName',
'email' => 'getEmail',
'suscribe' => 'getSuscribe',
'reminder' => 'getReminder',
'comment' => 'getComment',
'state' => 'getState',
'localizator' => 'getLocalizator',
'cancel_comment' => 'getCancelComment',
'confirmed_comment' => 'getConfirmedComment',
'menu' => 'getMenu',
'dining_area' => 'getDiningArea',
'phone' => 'getPhone'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATE_PENDING = 'pending';
const STATE_PENDING_PAYMENT = 'pending_payment';
const STATE_CONFIRMED = 'confirmed';
const STATE_CANCELED = 'canceled';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_PENDING,
self::STATE_PENDING_PAYMENT,
self::STATE_CONFIRMED,
self::STATE_CANCELED,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['booking_date'] = isset($data['booking_date']) ? $data['booking_date'] : null;
        $this->container['booking_time'] = isset($data['booking_time']) ? $data['booking_time'] : null;
        $this->container['bookers'] = isset($data['bookers']) ? $data['bookers'] : null;
        $this->container['coupon_code'] = isset($data['coupon_code']) ? $data['coupon_code'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['suscribe'] = isset($data['suscribe']) ? $data['suscribe'] : null;
        $this->container['reminder'] = isset($data['reminder']) ? $data['reminder'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['localizator'] = isset($data['localizator']) ? $data['localizator'] : null;
        $this->container['cancel_comment'] = isset($data['cancel_comment']) ? $data['cancel_comment'] : null;
        $this->container['confirmed_comment'] = isset($data['confirmed_comment']) ? $data['confirmed_comment'] : null;
        $this->container['menu'] = isset($data['menu']) ? $data['menu'] : null;
        $this->container['dining_area'] = isset($data['dining_area']) ? $data['dining_area'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets booking_date
     *
     * @return \DateTime
     */
    public function getBookingDate()
    {
        return $this->container['booking_date'];
    }

    /**
     * Sets booking_date
     *
     * @param \DateTime $booking_date Fecha de la reserva
     *
     * @return $this
     */
    public function setBookingDate($booking_date)
    {
        $this->container['booking_date'] = $booking_date;

        return $this;
    }

    /**
     * Gets booking_time
     *
     * @return string
     */
    public function getBookingTime()
    {
        return $this->container['booking_time'];
    }

    /**
     * Sets booking_time
     *
     * @param string $booking_time Hora de la reserva
     *
     * @return $this
     */
    public function setBookingTime($booking_time)
    {
        $this->container['booking_time'] = $booking_time;

        return $this;
    }

    /**
     * Gets bookers
     *
     * @return int
     */
    public function getBookers()
    {
        return $this->container['bookers'];
    }

    /**
     * Sets bookers
     *
     * @param int $bookers NÃºmero de comensales
     *
     * @return $this
     */
    public function setBookers($bookers)
    {
        $this->container['bookers'] = $bookers;

        return $this;
    }

    /**
     * Gets coupon_code
     *
     * @return string
     */
    public function getCouponCode()
    {
        return $this->container['coupon_code'];
    }

    /**
     * Sets coupon_code
     *
     * @param string $coupon_code Hora de la reserva
     *
     * @return $this
     */
    public function setCouponCode($coupon_code)
    {
        $this->container['coupon_code'] = $coupon_code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Nombre de contacto del usuario de la reserva
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Email de contacto del usuario de la reserva
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets suscribe
     *
     * @return bool
     */
    public function getSuscribe()
    {
        return $this->container['suscribe'];
    }

    /**
     * Sets suscribe
     *
     * @param bool $suscribe Si se suscribe a novedades del restaurante (o se afilia al club vip del mismo)
     *
     * @return $this
     */
    public function setSuscribe($suscribe)
    {
        $this->container['suscribe'] = $suscribe;

        return $this;
    }

    /**
     * Gets reminder
     *
     * @return bool
     */
    public function getReminder()
    {
        return $this->container['reminder'];
    }

    /**
     * Sets reminder
     *
     * @param bool $reminder Indica si se le va a enviar por email un recordatorio de la reserva minutos antes de la misma (por defecto sÃ­)
     *
     * @return $this
     */
    public function setReminder($reminder)
    {
        $this->container['reminder'] = $reminder;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment Comentarios y observaciones en la reserva por parte del usuario de la misma
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state Estado de la reserva
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets localizator
     *
     * @return string
     */
    public function getLocalizator()
    {
        return $this->container['localizator'];
    }

    /**
     * Sets localizator
     *
     * @param string $localizator Localizador de la reserva (cÃ³digo Ãºnico para el usuario que realizÃ³ de la misma)
     *
     * @return $this
     */
    public function setLocalizator($localizator)
    {
        $this->container['localizator'] = $localizator;

        return $this;
    }

    /**
     * Gets cancel_comment
     *
     * @return string
     */
    public function getCancelComment()
    {
        return $this->container['cancel_comment'];
    }

    /**
     * Sets cancel_comment
     *
     * @param string $cancel_comment Comentario en caso de que la reserva este cancelada (solo vendra completo si la reserva tiene el estado de \"canceled\")
     *
     * @return $this
     */
    public function setCancelComment($cancel_comment)
    {
        $this->container['cancel_comment'] = $cancel_comment;

        return $this;
    }

    /**
     * Gets confirmed_comment
     *
     * @return string
     */
    public function getConfirmedComment()
    {
        return $this->container['confirmed_comment'];
    }

    /**
     * Sets confirmed_comment
     *
     * @param string $confirmed_comment Comentario en caso de que la reserva este confirmada (solo vendra completo si la reserva tiene el estado de \"confirmed\")
     *
     * @return $this
     */
    public function setConfirmedComment($confirmed_comment)
    {
        $this->container['confirmed_comment'] = $confirmed_comment;

        return $this;
    }

    /**
     * Gets menu
     *
     * @return \Listae\Client\Model\Menu
     */
    public function getMenu()
    {
        return $this->container['menu'];
    }

    /**
     * Sets menu
     *
     * @param \Listae\Client\Model\Menu $menu menu
     *
     * @return $this
     */
    public function setMenu($menu)
    {
        $this->container['menu'] = $menu;

        return $this;
    }

    /**
     * Gets dining_area
     *
     * @return \Listae\Client\Model\DiningArea
     */
    public function getDiningArea()
    {
        return $this->container['dining_area'];
    }

    /**
     * Sets dining_area
     *
     * @param \Listae\Client\Model\DiningArea $dining_area dining_area
     *
     * @return $this
     */
    public function setDiningArea($dining_area)
    {
        $this->container['dining_area'] = $dining_area;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return \Listae\Client\Model\Phone
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param \Listae\Client\Model\Phone $phone phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
