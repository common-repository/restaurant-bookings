<?php
/**
 * PaginationPostList
 *
 * PHP version 5
 *
 * @category Class
 * @package  Listae\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * listae API 2.0
 *
 * Documentación de los servicios REST de listae
 *
 * OpenAPI spec version: 2.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Listae\Client\Model;

use \ArrayAccess;
use \Listae\Client\ObjectSerializer;

/**
 * PaginationPostList Class Doc Comment
 *
 * @category Class
 * @package  Listae\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaginationPostList implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PaginationPostList';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'page_size' => 'int',
'start' => 'int',
'count' => 'int',
'total' => 'int',
'post' => '\Listae\Client\Model\Post[]',
'count_domain' => 'int',
'count_external' => 'int',
'count_internal' => 'int',
'count_internal_facebook' => 'int',
'count_internal_twitter' => 'int',
'count_internal_other' => 'int',
'count_total_without_filter' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'page_size' => 'int32',
'start' => 'int32',
'count' => 'int32',
'total' => 'int64',
'post' => null,
'count_domain' => 'int64',
'count_external' => 'int64',
'count_internal' => 'int64',
'count_internal_facebook' => 'int64',
'count_internal_twitter' => 'int64',
'count_internal_other' => 'int64',
'count_total_without_filter' => 'int64'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'page_size' => 'pageSize',
'start' => 'start',
'count' => 'count',
'total' => 'total',
'post' => 'post',
'count_domain' => 'countDomain',
'count_external' => 'countExternal',
'count_internal' => 'countInternal',
'count_internal_facebook' => 'countInternalFacebook',
'count_internal_twitter' => 'countInternalTwitter',
'count_internal_other' => 'countInternalOther',
'count_total_without_filter' => 'countTotalWithoutFilter'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'page_size' => 'setPageSize',
'start' => 'setStart',
'count' => 'setCount',
'total' => 'setTotal',
'post' => 'setPost',
'count_domain' => 'setCountDomain',
'count_external' => 'setCountExternal',
'count_internal' => 'setCountInternal',
'count_internal_facebook' => 'setCountInternalFacebook',
'count_internal_twitter' => 'setCountInternalTwitter',
'count_internal_other' => 'setCountInternalOther',
'count_total_without_filter' => 'setCountTotalWithoutFilter'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'page_size' => 'getPageSize',
'start' => 'getStart',
'count' => 'getCount',
'total' => 'getTotal',
'post' => 'getPost',
'count_domain' => 'getCountDomain',
'count_external' => 'getCountExternal',
'count_internal' => 'getCountInternal',
'count_internal_facebook' => 'getCountInternalFacebook',
'count_internal_twitter' => 'getCountInternalTwitter',
'count_internal_other' => 'getCountInternalOther',
'count_total_without_filter' => 'getCountTotalWithoutFilter'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['page_size'] = isset($data['page_size']) ? $data['page_size'] : null;
        $this->container['start'] = isset($data['start']) ? $data['start'] : null;
        $this->container['count'] = isset($data['count']) ? $data['count'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['post'] = isset($data['post']) ? $data['post'] : null;
        $this->container['count_domain'] = isset($data['count_domain']) ? $data['count_domain'] : null;
        $this->container['count_external'] = isset($data['count_external']) ? $data['count_external'] : null;
        $this->container['count_internal'] = isset($data['count_internal']) ? $data['count_internal'] : null;
        $this->container['count_internal_facebook'] = isset($data['count_internal_facebook']) ? $data['count_internal_facebook'] : null;
        $this->container['count_internal_twitter'] = isset($data['count_internal_twitter']) ? $data['count_internal_twitter'] : null;
        $this->container['count_internal_other'] = isset($data['count_internal_other']) ? $data['count_internal_other'] : null;
        $this->container['count_total_without_filter'] = isset($data['count_total_without_filter']) ? $data['count_total_without_filter'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets page_size
     *
     * @return int
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int $page_size Tamaño de la página
     *
     * @return $this
     */
    public function setPageSize($page_size)
    {
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets start
     *
     * @return int
     */
    public function getStart()
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     *
     * @param int $start Indice del primer item de la página actual respecto de todos (empezando por 0)
     *
     * @return $this
     */
    public function setStart($start)
    {
        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets count
     *
     * @return int
     */
    public function getCount()
    {
        return $this->container['count'];
    }

    /**
     * Sets count
     *
     * @param int $count Número de items en la página actual
     *
     * @return $this
     */
    public function setCount($count)
    {
        $this->container['count'] = $count;

        return $this;
    }

    /**
     * Gets total
     *
     * @return int
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param int $total Número total de registros
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets post
     *
     * @return \Listae\Client\Model\Post[]
     */
    public function getPost()
    {
        return $this->container['post'];
    }

    /**
     * Sets post
     *
     * @param \Listae\Client\Model\Post[] $post Las distintas publicaciones para la pagina actual
     *
     * @return $this
     */
    public function setPost($post)
    {
        $this->container['post'] = $post;

        return $this;
    }

    /**
     * Gets count_domain
     *
     * @return int
     */
    public function getCountDomain()
    {
        return $this->container['count_domain'];
    }

    /**
     * Sets count_domain
     *
     * @param int $count_domain Número total de publicaciones dentro del sitio de busqueda por el cual se accedio a este objeto
     *
     * @return $this
     */
    public function setCountDomain($count_domain)
    {
        $this->container['count_domain'] = $count_domain;

        return $this;
    }

    /**
     * Gets count_external
     *
     * @return int
     */
    public function getCountExternal()
    {
        return $this->container['count_external'];
    }

    /**
     * Sets count_external
     *
     * @param int $count_external Número total de publicaciones por tercerceros acerca del restaurante
     *
     * @return $this
     */
    public function setCountExternal($count_external)
    {
        $this->container['count_external'] = $count_external;

        return $this;
    }

    /**
     * Gets count_internal
     *
     * @return int
     */
    public function getCountInternal()
    {
        return $this->container['count_internal'];
    }

    /**
     * Sets count_internal
     *
     * @param int $count_internal Número total de publicaciones del restaurante
     *
     * @return $this
     */
    public function setCountInternal($count_internal)
    {
        $this->container['count_internal'] = $count_internal;

        return $this;
    }

    /**
     * Gets count_internal_facebook
     *
     * @return int
     */
    public function getCountInternalFacebook()
    {
        return $this->container['count_internal_facebook'];
    }

    /**
     * Sets count_internal_facebook
     *
     * @param int $count_internal_facebook Número total de publicaciones del restaurante en facebook
     *
     * @return $this
     */
    public function setCountInternalFacebook($count_internal_facebook)
    {
        $this->container['count_internal_facebook'] = $count_internal_facebook;

        return $this;
    }

    /**
     * Gets count_internal_twitter
     *
     * @return int
     */
    public function getCountInternalTwitter()
    {
        return $this->container['count_internal_twitter'];
    }

    /**
     * Sets count_internal_twitter
     *
     * @param int $count_internal_twitter Número total de publicaciones del restaurante en twitter
     *
     * @return $this
     */
    public function setCountInternalTwitter($count_internal_twitter)
    {
        $this->container['count_internal_twitter'] = $count_internal_twitter;

        return $this;
    }

    /**
     * Gets count_internal_other
     *
     * @return int
     */
    public function getCountInternalOther()
    {
        return $this->container['count_internal_other'];
    }

    /**
     * Sets count_internal_other
     *
     * @param int $count_internal_other Número total de publicaciones del restaurante que no son facebook ni twitter
     *
     * @return $this
     */
    public function setCountInternalOther($count_internal_other)
    {
        $this->container['count_internal_other'] = $count_internal_other;

        return $this;
    }

    /**
     * Gets count_total_without_filter
     *
     * @return int
     */
    public function getCountTotalWithoutFilter()
    {
        return $this->container['count_total_without_filter'];
    }

    /**
     * Sets count_total_without_filter
     *
     * @param int $count_total_without_filter Número total de publicaciones
     *
     * @return $this
     */
    public function setCountTotalWithoutFilter($count_total_without_filter)
    {
        $this->container['count_total_without_filter'] = $count_total_without_filter;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
