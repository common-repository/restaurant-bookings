<?php
/**
 * Coupon
 *
 * PHP version 5
 *
 * @category Class
 * @package  Listae\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * listae API 2.0
 *
 * Documentación de los servicios REST de listae
 *
 * OpenAPI spec version: 2.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Listae\Client\Model;

use \ArrayAccess;
use \Listae\Client\ObjectSerializer;

/**
 * Coupon Class Doc Comment
 *
 * @category Class
 * @package  Listae\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Coupon implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Coupon';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
'created' => '\DateTime',
'updated' => '\DateTime',
'name' => '\Listae\Client\Model\Text[]',
'description' => '\Listae\Client\Model\Text[]',
'buy_condition' => '\Listae\Client\Model\Text[]',
'gift_condition' => '\Listae\Client\Model\Text[]',
'availability' => '\Listae\Client\Model\AgendaBase',
'item' => '\Listae\Client\Model\CatalogItem',
'menu' => '\Listae\Client\Model\Menu',
'price' => 'float',
'currency' => 'string',
'min_quantity' => 'int',
'max_quantity' => 'int',
'stock_quantity' => 'int',
'total_quantity' => 'int',
'allow_as_gift' => 'bool',
'buy_available' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
'created' => 'date-time',
'updated' => 'date-time',
'name' => null,
'description' => null,
'buy_condition' => null,
'gift_condition' => null,
'availability' => null,
'item' => null,
'menu' => null,
'price' => 'float',
'currency' => null,
'min_quantity' => 'int64',
'max_quantity' => 'int64',
'stock_quantity' => 'int64',
'total_quantity' => 'int64',
'allow_as_gift' => null,
'buy_available' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
'created' => 'created',
'updated' => 'updated',
'name' => 'name',
'description' => 'description',
'buy_condition' => 'buyCondition',
'gift_condition' => 'giftCondition',
'availability' => 'availability',
'item' => 'item',
'menu' => 'menu',
'price' => 'price',
'currency' => 'currency',
'min_quantity' => 'minQuantity',
'max_quantity' => 'maxQuantity',
'stock_quantity' => 'stockQuantity',
'total_quantity' => 'totalQuantity',
'allow_as_gift' => 'allowAsGift',
'buy_available' => 'buyAvailable'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
'created' => 'setCreated',
'updated' => 'setUpdated',
'name' => 'setName',
'description' => 'setDescription',
'buy_condition' => 'setBuyCondition',
'gift_condition' => 'setGiftCondition',
'availability' => 'setAvailability',
'item' => 'setItem',
'menu' => 'setMenu',
'price' => 'setPrice',
'currency' => 'setCurrency',
'min_quantity' => 'setMinQuantity',
'max_quantity' => 'setMaxQuantity',
'stock_quantity' => 'setStockQuantity',
'total_quantity' => 'setTotalQuantity',
'allow_as_gift' => 'setAllowAsGift',
'buy_available' => 'setBuyAvailable'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
'created' => 'getCreated',
'updated' => 'getUpdated',
'name' => 'getName',
'description' => 'getDescription',
'buy_condition' => 'getBuyCondition',
'gift_condition' => 'getGiftCondition',
'availability' => 'getAvailability',
'item' => 'getItem',
'menu' => 'getMenu',
'price' => 'getPrice',
'currency' => 'getCurrency',
'min_quantity' => 'getMinQuantity',
'max_quantity' => 'getMaxQuantity',
'stock_quantity' => 'getStockQuantity',
'total_quantity' => 'getTotalQuantity',
'allow_as_gift' => 'getAllowAsGift',
'buy_available' => 'getBuyAvailable'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['buy_condition'] = isset($data['buy_condition']) ? $data['buy_condition'] : null;
        $this->container['gift_condition'] = isset($data['gift_condition']) ? $data['gift_condition'] : null;
        $this->container['availability'] = isset($data['availability']) ? $data['availability'] : null;
        $this->container['item'] = isset($data['item']) ? $data['item'] : null;
        $this->container['menu'] = isset($data['menu']) ? $data['menu'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['min_quantity'] = isset($data['min_quantity']) ? $data['min_quantity'] : null;
        $this->container['max_quantity'] = isset($data['max_quantity']) ? $data['max_quantity'] : null;
        $this->container['stock_quantity'] = isset($data['stock_quantity']) ? $data['stock_quantity'] : null;
        $this->container['total_quantity'] = isset($data['total_quantity']) ? $data['total_quantity'] : null;
        $this->container['allow_as_gift'] = isset($data['allow_as_gift']) ? $data['allow_as_gift'] : null;
        $this->container['buy_available'] = isset($data['buy_available']) ? $data['buy_available'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url Identificador único según tipo en ae
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created Fecha de inserción/creación
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param \DateTime $updated Fecha de actualización
     *
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets name
     *
     * @return \Listae\Client\Model\Text[]
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param \Listae\Client\Model\Text[] $name Nombre del cupón/bono
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return \Listae\Client\Model\Text[]
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param \Listae\Client\Model\Text[] $description Breve descripción del cupón.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets buy_condition
     *
     * @return \Listae\Client\Model\Text[]
     */
    public function getBuyCondition()
    {
        return $this->container['buy_condition'];
    }

    /**
     * Sets buy_condition
     *
     * @param \Listae\Client\Model\Text[] $buy_condition Breve descripción de las condiciones del bono cuando es comprado.
     *
     * @return $this
     */
    public function setBuyCondition($buy_condition)
    {
        $this->container['buy_condition'] = $buy_condition;

        return $this;
    }

    /**
     * Gets gift_condition
     *
     * @return \Listae\Client\Model\Text[]
     */
    public function getGiftCondition()
    {
        return $this->container['gift_condition'];
    }

    /**
     * Sets gift_condition
     *
     * @param \Listae\Client\Model\Text[] $gift_condition Breve descripción de las condiciones del bono cuando es regalado.
     *
     * @return $this
     */
    public function setGiftCondition($gift_condition)
    {
        $this->container['gift_condition'] = $gift_condition;

        return $this;
    }

    /**
     * Gets availability
     *
     * @return \Listae\Client\Model\AgendaBase
     */
    public function getAvailability()
    {
        return $this->container['availability'];
    }

    /**
     * Sets availability
     *
     * @param \Listae\Client\Model\AgendaBase $availability availability
     *
     * @return $this
     */
    public function setAvailability($availability)
    {
        $this->container['availability'] = $availability;

        return $this;
    }

    /**
     * Gets item
     *
     * @return \Listae\Client\Model\CatalogItem
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param \Listae\Client\Model\CatalogItem $item item
     *
     * @return $this
     */
    public function setItem($item)
    {
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets menu
     *
     * @return \Listae\Client\Model\Menu
     */
    public function getMenu()
    {
        return $this->container['menu'];
    }

    /**
     * Sets menu
     *
     * @param \Listae\Client\Model\Menu $menu menu
     *
     * @return $this
     */
    public function setMenu($menu)
    {
        $this->container['menu'] = $menu;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float $price Precio del artículo/menú por unidad (o comensal)
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Código de moneda en la que se expresan el precio del artículo (EUR, USD, ...)
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets min_quantity
     *
     * @return int
     */
    public function getMinQuantity()
    {
        return $this->container['min_quantity'];
    }

    /**
     * Sets min_quantity
     *
     * @param int $min_quantity Cantidad minima a seleccionar
     *
     * @return $this
     */
    public function setMinQuantity($min_quantity)
    {
        $this->container['min_quantity'] = $min_quantity;

        return $this;
    }

    /**
     * Gets max_quantity
     *
     * @return int
     */
    public function getMaxQuantity()
    {
        return $this->container['max_quantity'];
    }

    /**
     * Sets max_quantity
     *
     * @param int $max_quantity Cantidad maxima posible selccionable
     *
     * @return $this
     */
    public function setMaxQuantity($max_quantity)
    {
        $this->container['max_quantity'] = $max_quantity;

        return $this;
    }

    /**
     * Gets stock_quantity
     *
     * @return int
     */
    public function getStockQuantity()
    {
        return $this->container['stock_quantity'];
    }

    /**
     * Sets stock_quantity
     *
     * @param int $stock_quantity Cantidad disponible
     *
     * @return $this
     */
    public function setStockQuantity($stock_quantity)
    {
        $this->container['stock_quantity'] = $stock_quantity;

        return $this;
    }

    /**
     * Gets total_quantity
     *
     * @return int
     */
    public function getTotalQuantity()
    {
        return $this->container['total_quantity'];
    }

    /**
     * Sets total_quantity
     *
     * @param int $total_quantity Cantidad total de bonos emitibles (emitidos o no)
     *
     * @return $this
     */
    public function setTotalQuantity($total_quantity)
    {
        $this->container['total_quantity'] = $total_quantity;

        return $this;
    }

    /**
     * Gets allow_as_gift
     *
     * @return bool
     */
    public function getAllowAsGift()
    {
        return $this->container['allow_as_gift'];
    }

    /**
     * Sets allow_as_gift
     *
     * @param bool $allow_as_gift Si está disponible para comprar como regalo
     *
     * @return $this
     */
    public function setAllowAsGift($allow_as_gift)
    {
        $this->container['allow_as_gift'] = $allow_as_gift;

        return $this;
    }

    /**
     * Gets buy_available
     *
     * @return bool
     */
    public function getBuyAvailable()
    {
        return $this->container['buy_available'];
    }

    /**
     * Sets buy_available
     *
     * @param bool $buy_available Si está disponible para comprar
     *
     * @return $this
     */
    public function setBuyAvailable($buy_available)
    {
        $this->container['buy_available'] = $buy_available;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
