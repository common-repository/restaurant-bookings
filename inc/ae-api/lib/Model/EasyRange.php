<?php
/**
 * EasyRange
 *
 * PHP version 5
 *
 * @category Class
 * @package  Listae\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * listae API 2.0
 *
 * Documentación de los servicios REST de listae
 *
 * OpenAPI spec version: 2.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Listae\Client\Model;

use \ArrayAccess;
use \Listae\Client\ObjectSerializer;

/**
 * EasyRange Class Doc Comment
 *
 * @category Class
 * @description Rango horario aplicado a dias de la semana, meses, entre fechas y/o entre horas
 * @package  Listae\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EasyRange implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EasyRange';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'closed' => 'bool',
'from' => '\DateTime',
'to' => '\DateTime',
'description' => '\Listae\Client\Model\Text[]',
'weekdays' => '\Listae\Client\Model\EasyWeekDays',
'months' => '\Listae\Client\Model\EasyMonths',
'time_ranges' => '\Listae\Client\Model\EasyTimeRanges'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'closed' => null,
'from' => 'date',
'to' => 'date',
'description' => null,
'weekdays' => null,
'months' => null,
'time_ranges' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'closed' => 'closed',
'from' => 'from',
'to' => 'to',
'description' => 'description',
'weekdays' => 'weekdays',
'months' => 'months',
'time_ranges' => 'time-ranges'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'closed' => 'setClosed',
'from' => 'setFrom',
'to' => 'setTo',
'description' => 'setDescription',
'weekdays' => 'setWeekdays',
'months' => 'setMonths',
'time_ranges' => 'setTimeRanges'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'closed' => 'getClosed',
'from' => 'getFrom',
'to' => 'getTo',
'description' => 'getDescription',
'weekdays' => 'getWeekdays',
'months' => 'getMonths',
'time_ranges' => 'getTimeRanges'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['closed'] = isset($data['closed']) ? $data['closed'] : null;
        $this->container['from'] = isset($data['from']) ? $data['from'] : null;
        $this->container['to'] = isset($data['to']) ? $data['to'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['weekdays'] = isset($data['weekdays']) ? $data['weekdays'] : null;
        $this->container['months'] = isset($data['months']) ? $data['months'] : null;
        $this->container['time_ranges'] = isset($data['time_ranges']) ? $data['time_ranges'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets closed
     *
     * @return bool
     */
    public function getClosed()
    {
        return $this->container['closed'];
    }

    /**
     * Sets closed
     *
     * @param bool $closed Si se trata de un rango de cierres o no
     *
     * @return $this
     */
    public function setClosed($closed)
    {
        $this->container['closed'] = $closed;

        return $this;
    }

    /**
     * Gets from
     *
     * @return \DateTime
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param \DateTime $from Fecha desde
     *
     * @return $this
     */
    public function setFrom($from)
    {
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets to
     *
     * @return \DateTime
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param \DateTime $to Fecha hasta
     *
     * @return $this
     */
    public function setTo($to)
    {
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets description
     *
     * @return \Listae\Client\Model\Text[]
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param \Listae\Client\Model\Text[] $description Descripción del rango horario
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets weekdays
     *
     * @return \Listae\Client\Model\EasyWeekDays
     */
    public function getWeekdays()
    {
        return $this->container['weekdays'];
    }

    /**
     * Sets weekdays
     *
     * @param \Listae\Client\Model\EasyWeekDays $weekdays weekdays
     *
     * @return $this
     */
    public function setWeekdays($weekdays)
    {
        $this->container['weekdays'] = $weekdays;

        return $this;
    }

    /**
     * Gets months
     *
     * @return \Listae\Client\Model\EasyMonths
     */
    public function getMonths()
    {
        return $this->container['months'];
    }

    /**
     * Sets months
     *
     * @param \Listae\Client\Model\EasyMonths $months months
     *
     * @return $this
     */
    public function setMonths($months)
    {
        $this->container['months'] = $months;

        return $this;
    }

    /**
     * Gets time_ranges
     *
     * @return \Listae\Client\Model\EasyTimeRanges
     */
    public function getTimeRanges()
    {
        return $this->container['time_ranges'];
    }

    /**
     * Sets time_ranges
     *
     * @param \Listae\Client\Model\EasyTimeRanges $time_ranges time_ranges
     *
     * @return $this
     */
    public function setTimeRanges($time_ranges)
    {
        $this->container['time_ranges'] = $time_ranges;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
