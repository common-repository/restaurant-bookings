<?php
/**
 * Review
 *
 * PHP version 5
 *
 * @category Class
 * @package  Listae\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * listae API 2.0
 *
 * Documentación de los servicios REST de listae
 *
 * OpenAPI spec version: 2.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Listae\Client\Model;

use \ArrayAccess;
use \Listae\Client\ObjectSerializer;

/**
 * Review Class Doc Comment
 *
 * @category Class
 * @description Información ampliada de opiniones de usuarios acerca de negocios
 * @package  Listae\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Review implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Review';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
'created' => '\DateTime',
'updated' => '\DateTime',
'subject' => 'string',
'body' => 'string',
'display_name' => 'string',
'origin' => 'string',
'reply' => 'string',
'reason' => 'string',
'stars' => 'int',
'stars_service' => 'int',
'stars_food' => 'int',
'stars_local' => 'int',
'valid' => 'bool',
'from_booking' => 'bool',
'from_business_website' => 'bool',
'order_type' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
'created' => 'date-time',
'updated' => 'date-time',
'subject' => null,
'body' => null,
'display_name' => null,
'origin' => null,
'reply' => null,
'reason' => null,
'stars' => 'int32',
'stars_service' => 'int32',
'stars_food' => 'int32',
'stars_local' => 'int32',
'valid' => null,
'from_booking' => null,
'from_business_website' => null,
'order_type' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
'created' => 'created',
'updated' => 'updated',
'subject' => 'subject',
'body' => 'body',
'display_name' => 'displayName',
'origin' => 'origin',
'reply' => 'reply',
'reason' => 'reason',
'stars' => 'stars',
'stars_service' => 'starsService',
'stars_food' => 'starsFood',
'stars_local' => 'starsLocal',
'valid' => 'valid',
'from_booking' => 'fromBooking',
'from_business_website' => 'fromBusinessWebsite',
'order_type' => 'orderType'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
'created' => 'setCreated',
'updated' => 'setUpdated',
'subject' => 'setSubject',
'body' => 'setBody',
'display_name' => 'setDisplayName',
'origin' => 'setOrigin',
'reply' => 'setReply',
'reason' => 'setReason',
'stars' => 'setStars',
'stars_service' => 'setStarsService',
'stars_food' => 'setStarsFood',
'stars_local' => 'setStarsLocal',
'valid' => 'setValid',
'from_booking' => 'setFromBooking',
'from_business_website' => 'setFromBusinessWebsite',
'order_type' => 'setOrderType'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
'created' => 'getCreated',
'updated' => 'getUpdated',
'subject' => 'getSubject',
'body' => 'getBody',
'display_name' => 'getDisplayName',
'origin' => 'getOrigin',
'reply' => 'getReply',
'reason' => 'getReason',
'stars' => 'getStars',
'stars_service' => 'getStarsService',
'stars_food' => 'getStarsFood',
'stars_local' => 'getStarsLocal',
'valid' => 'getValid',
'from_booking' => 'getFromBooking',
'from_business_website' => 'getFromBusinessWebsite',
'order_type' => 'getOrderType'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['body'] = isset($data['body']) ? $data['body'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['origin'] = isset($data['origin']) ? $data['origin'] : null;
        $this->container['reply'] = isset($data['reply']) ? $data['reply'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['stars'] = isset($data['stars']) ? $data['stars'] : null;
        $this->container['stars_service'] = isset($data['stars_service']) ? $data['stars_service'] : null;
        $this->container['stars_food'] = isset($data['stars_food']) ? $data['stars_food'] : null;
        $this->container['stars_local'] = isset($data['stars_local']) ? $data['stars_local'] : null;
        $this->container['valid'] = isset($data['valid']) ? $data['valid'] : null;
        $this->container['from_booking'] = isset($data['from_booking']) ? $data['from_booking'] : null;
        $this->container['from_business_website'] = isset($data['from_business_website']) ? $data['from_business_website'] : null;
        $this->container['order_type'] = isset($data['order_type']) ? $data['order_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url Identificador único según tipo en ae
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created Fecha de inserción/creación
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param \DateTime $updated Fecha de actualización
     *
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject Título de la opinión
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string $body Cuerpo de la opinión
     *
     * @return $this
     */
    public function setBody($body)
    {
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name Nombre para mostrar del usuario de la opinion
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return string
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param string $origin URL al sitio origen de la review.... aqui ahora deberian poder venir algo de la app...
     *
     * @return $this
     */
    public function setOrigin($origin)
    {
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets reply
     *
     * @return string
     */
    public function getReply()
    {
        return $this->container['reply'];
    }

    /**
     * Sets reply
     *
     * @param string $reply Respuesta del negocio a la opinión (si la tuviera)
     *
     * @return $this
     */
    public function setReply($reply)
    {
        $this->container['reply'] = $reply;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason Motivo por el cual se usaron los servicios del negocio
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets stars
     *
     * @return int
     */
    public function getStars()
    {
        return $this->container['stars'];
    }

    /**
     * Sets stars
     *
     * @param int $stars Puntuación general (1-5)
     *
     * @return $this
     */
    public function setStars($stars)
    {
        $this->container['stars'] = $stars;

        return $this;
    }

    /**
     * Gets stars_service
     *
     * @return int
     */
    public function getStarsService()
    {
        return $this->container['stars_service'];
    }

    /**
     * Sets stars_service
     *
     * @param int $stars_service Puntuación del servicio (1-5)
     *
     * @return $this
     */
    public function setStarsService($stars_service)
    {
        $this->container['stars_service'] = $stars_service;

        return $this;
    }

    /**
     * Gets stars_food
     *
     * @return int
     */
    public function getStarsFood()
    {
        return $this->container['stars_food'];
    }

    /**
     * Sets stars_food
     *
     * @param int $stars_food Puntuación de la comida (1-5)
     *
     * @return $this
     */
    public function setStarsFood($stars_food)
    {
        $this->container['stars_food'] = $stars_food;

        return $this;
    }

    /**
     * Gets stars_local
     *
     * @return int
     */
    public function getStarsLocal()
    {
        return $this->container['stars_local'];
    }

    /**
     * Sets stars_local
     *
     * @param int $stars_local Puntuación del local (1-5)
     *
     * @return $this
     */
    public function setStarsLocal($stars_local)
    {
        $this->container['stars_local'] = $stars_local;

        return $this;
    }

    /**
     * Gets valid
     *
     * @return bool
     */
    public function getValid()
    {
        return $this->container['valid'];
    }

    /**
     * Sets valid
     *
     * @param bool $valid Indica si ha sido validada o no
     *
     * @return $this
     */
    public function setValid($valid)
    {
        $this->container['valid'] = $valid;

        return $this;
    }

    /**
     * Gets from_booking
     *
     * @return bool
     */
    public function getFromBooking()
    {
        return $this->container['from_booking'];
    }

    /**
     * Sets from_booking
     *
     * @param bool $from_booking Indica si la opinión es en respuesta a una reserva realizada
     *
     * @return $this
     */
    public function setFromBooking($from_booking)
    {
        $this->container['from_booking'] = $from_booking;

        return $this;
    }

    /**
     * Gets from_business_website
     *
     * @return bool
     */
    public function getFromBusinessWebsite()
    {
        return $this->container['from_business_website'];
    }

    /**
     * Sets from_business_website
     *
     * @param bool $from_business_website Indica si se realizo la opinion desde el sitio web del negocio
     *
     * @return $this
     */
    public function setFromBusinessWebsite($from_business_website)
    {
        $this->container['from_business_website'] = $from_business_website;

        return $this;
    }

    /**
     * Gets order_type
     *
     * @return string
     */
    public function getOrderType()
    {
        return $this->container['order_type'];
    }

    /**
     * Sets order_type
     *
     * @param string $order_type Tipo del pedido orgien de la review
     *
     * @return $this
     */
    public function setOrderType($order_type)
    {
        $this->container['order_type'] = $order_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
