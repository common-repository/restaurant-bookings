<?php
/**
 * OrderDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  Listae\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * listae API 2.0
 *
 * DocumentaciÃ³n de los servicios REST de listae
 *
 * OpenAPI spec version: 2.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Listae\Client\Model;

use \ArrayAccess;
use \Listae\Client\ObjectSerializer;

/**
 * OrderDetail Class Doc Comment
 *
 * @category Class
 * @package  Listae\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderDetail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'localizator' => 'string',
'invoice_id' => 'string',
'paid' => 'bool',
'payment_method' => 'string',
'created' => '\DateTime',
'order_status' => 'string',
'order_type' => 'string',
'booking_date' => '\DateTime',
'booking_time' => 'string',
'client_name' => 'string',
'client_phone' => 'string',
'client_address' => 'string',
'business_name' => 'string',
'business_phone' => 'string',
'business_address' => 'string',
'business_logo' => 'string',
'comment' => 'string',
'cancel_comment' => 'string',
'order' => '\Listae\Client\Model\Order'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'localizator' => null,
'invoice_id' => null,
'paid' => null,
'payment_method' => null,
'created' => 'date-time',
'order_status' => null,
'order_type' => null,
'booking_date' => 'date',
'booking_time' => null,
'client_name' => null,
'client_phone' => null,
'client_address' => null,
'business_name' => null,
'business_phone' => null,
'business_address' => null,
'business_logo' => null,
'comment' => null,
'cancel_comment' => null,
'order' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'localizator' => 'localizator',
'invoice_id' => 'invoiceId',
'paid' => 'paid',
'payment_method' => 'paymentMethod',
'created' => 'created',
'order_status' => 'orderStatus',
'order_type' => 'orderType',
'booking_date' => 'bookingDate',
'booking_time' => 'bookingTime',
'client_name' => 'clientName',
'client_phone' => 'clientPhone',
'client_address' => 'clientAddress',
'business_name' => 'businessName',
'business_phone' => 'businessPhone',
'business_address' => 'businessAddress',
'business_logo' => 'businessLogo',
'comment' => 'comment',
'cancel_comment' => 'cancelComment',
'order' => 'order'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'localizator' => 'setLocalizator',
'invoice_id' => 'setInvoiceId',
'paid' => 'setPaid',
'payment_method' => 'setPaymentMethod',
'created' => 'setCreated',
'order_status' => 'setOrderStatus',
'order_type' => 'setOrderType',
'booking_date' => 'setBookingDate',
'booking_time' => 'setBookingTime',
'client_name' => 'setClientName',
'client_phone' => 'setClientPhone',
'client_address' => 'setClientAddress',
'business_name' => 'setBusinessName',
'business_phone' => 'setBusinessPhone',
'business_address' => 'setBusinessAddress',
'business_logo' => 'setBusinessLogo',
'comment' => 'setComment',
'cancel_comment' => 'setCancelComment',
'order' => 'setOrder'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'localizator' => 'getLocalizator',
'invoice_id' => 'getInvoiceId',
'paid' => 'getPaid',
'payment_method' => 'getPaymentMethod',
'created' => 'getCreated',
'order_status' => 'getOrderStatus',
'order_type' => 'getOrderType',
'booking_date' => 'getBookingDate',
'booking_time' => 'getBookingTime',
'client_name' => 'getClientName',
'client_phone' => 'getClientPhone',
'client_address' => 'getClientAddress',
'business_name' => 'getBusinessName',
'business_phone' => 'getBusinessPhone',
'business_address' => 'getBusinessAddress',
'business_logo' => 'getBusinessLogo',
'comment' => 'getComment',
'cancel_comment' => 'getCancelComment',
'order' => 'getOrder'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['localizator'] = isset($data['localizator']) ? $data['localizator'] : null;
        $this->container['invoice_id'] = isset($data['invoice_id']) ? $data['invoice_id'] : null;
        $this->container['paid'] = isset($data['paid']) ? $data['paid'] : null;
        $this->container['payment_method'] = isset($data['payment_method']) ? $data['payment_method'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['order_status'] = isset($data['order_status']) ? $data['order_status'] : null;
        $this->container['order_type'] = isset($data['order_type']) ? $data['order_type'] : null;
        $this->container['booking_date'] = isset($data['booking_date']) ? $data['booking_date'] : null;
        $this->container['booking_time'] = isset($data['booking_time']) ? $data['booking_time'] : null;
        $this->container['client_name'] = isset($data['client_name']) ? $data['client_name'] : null;
        $this->container['client_phone'] = isset($data['client_phone']) ? $data['client_phone'] : null;
        $this->container['client_address'] = isset($data['client_address']) ? $data['client_address'] : null;
        $this->container['business_name'] = isset($data['business_name']) ? $data['business_name'] : null;
        $this->container['business_phone'] = isset($data['business_phone']) ? $data['business_phone'] : null;
        $this->container['business_address'] = isset($data['business_address']) ? $data['business_address'] : null;
        $this->container['business_logo'] = isset($data['business_logo']) ? $data['business_logo'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['cancel_comment'] = isset($data['cancel_comment']) ? $data['cancel_comment'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets localizator
     *
     * @return string
     */
    public function getLocalizator()
    {
        return $this->container['localizator'];
    }

    /**
     * Sets localizator
     *
     * @param string $localizator Localizador del pedido
     *
     * @return $this
     */
    public function setLocalizator($localizator)
    {
        $this->container['localizator'] = $localizator;

        return $this;
    }

    /**
     * Gets invoice_id
     *
     * @return string
     */
    public function getInvoiceId()
    {
        return $this->container['invoice_id'];
    }

    /**
     * Sets invoice_id
     *
     * @param string $invoice_id Identificador de facturacion (opcional)
     *
     * @return $this
     */
    public function setInvoiceId($invoice_id)
    {
        $this->container['invoice_id'] = $invoice_id;

        return $this;
    }

    /**
     * Gets paid
     *
     * @return bool
     */
    public function getPaid()
    {
        return $this->container['paid'];
    }

    /**
     * Sets paid
     *
     * @param bool $paid Identifica si esta pagado o no
     *
     * @return $this
     */
    public function setPaid($paid)
    {
        $this->container['paid'] = $paid;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return string
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param string $payment_method Identificador del metodo de pago
     *
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created Fecha de inserciÃ³n/creaciÃ³n
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets order_status
     *
     * @return string
     */
    public function getOrderStatus()
    {
        return $this->container['order_status'];
    }

    /**
     * Sets order_status
     *
     * @param string $order_status Estado del pedido (CONFIRMED, CANCELED...)
     *
     * @return $this
     */
    public function setOrderStatus($order_status)
    {
        $this->container['order_status'] = $order_status;

        return $this;
    }

    /**
     * Gets order_type
     *
     * @return string
     */
    public function getOrderType()
    {
        return $this->container['order_type'];
    }

    /**
     * Sets order_type
     *
     * @param string $order_type Tipo de pedido (delivery, takeaway, booking...)
     *
     * @return $this
     */
    public function setOrderType($order_type)
    {
        $this->container['order_type'] = $order_type;

        return $this;
    }

    /**
     * Gets booking_date
     *
     * @return \DateTime
     */
    public function getBookingDate()
    {
        return $this->container['booking_date'];
    }

    /**
     * Sets booking_date
     *
     * @param \DateTime $booking_date Fecha de la resolucion del pedido
     *
     * @return $this
     */
    public function setBookingDate($booking_date)
    {
        $this->container['booking_date'] = $booking_date;

        return $this;
    }

    /**
     * Gets booking_time
     *
     * @return string
     */
    public function getBookingTime()
    {
        return $this->container['booking_time'];
    }

    /**
     * Sets booking_time
     *
     * @param string $booking_time Hora de la resolucion del pedido
     *
     * @return $this
     */
    public function setBookingTime($booking_time)
    {
        $this->container['booking_time'] = $booking_time;

        return $this;
    }

    /**
     * Gets client_name
     *
     * @return string
     */
    public function getClientName()
    {
        return $this->container['client_name'];
    }

    /**
     * Sets client_name
     *
     * @param string $client_name Nombre del contacto
     *
     * @return $this
     */
    public function setClientName($client_name)
    {
        $this->container['client_name'] = $client_name;

        return $this;
    }

    /**
     * Gets client_phone
     *
     * @return string
     */
    public function getClientPhone()
    {
        return $this->container['client_phone'];
    }

    /**
     * Sets client_phone
     *
     * @param string $client_phone TelÃ©fono del contacto
     *
     * @return $this
     */
    public function setClientPhone($client_phone)
    {
        $this->container['client_phone'] = $client_phone;

        return $this;
    }

    /**
     * Gets client_address
     *
     * @return string
     */
    public function getClientAddress()
    {
        return $this->container['client_address'];
    }

    /**
     * Sets client_address
     *
     * @param string $client_address DirecciÃ³n del contacto (solo delivery)
     *
     * @return $this
     */
    public function setClientAddress($client_address)
    {
        $this->container['client_address'] = $client_address;

        return $this;
    }

    /**
     * Gets business_name
     *
     * @return string
     */
    public function getBusinessName()
    {
        return $this->container['business_name'];
    }

    /**
     * Sets business_name
     *
     * @param string $business_name Nombre del negocio
     *
     * @return $this
     */
    public function setBusinessName($business_name)
    {
        $this->container['business_name'] = $business_name;

        return $this;
    }

    /**
     * Gets business_phone
     *
     * @return string
     */
    public function getBusinessPhone()
    {
        return $this->container['business_phone'];
    }

    /**
     * Sets business_phone
     *
     * @param string $business_phone TÃ©lefono del negocio
     *
     * @return $this
     */
    public function setBusinessPhone($business_phone)
    {
        $this->container['business_phone'] = $business_phone;

        return $this;
    }

    /**
     * Gets business_address
     *
     * @return string
     */
    public function getBusinessAddress()
    {
        return $this->container['business_address'];
    }

    /**
     * Sets business_address
     *
     * @param string $business_address DirecciÃ³n del negocio
     *
     * @return $this
     */
    public function setBusinessAddress($business_address)
    {
        $this->container['business_address'] = $business_address;

        return $this;
    }

    /**
     * Gets business_logo
     *
     * @return string
     */
    public function getBusinessLogo()
    {
        return $this->container['business_logo'];
    }

    /**
     * Sets business_logo
     *
     * @param string $business_logo URL a un logo del negocio
     *
     * @return $this
     */
    public function setBusinessLogo($business_logo)
    {
        $this->container['business_logo'] = $business_logo;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment Comentarios adicionales del pedido
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets cancel_comment
     *
     * @return string
     */
    public function getCancelComment()
    {
        return $this->container['cancel_comment'];
    }

    /**
     * Sets cancel_comment
     *
     * @param string $cancel_comment Comentarios de la cancelacion
     *
     * @return $this
     */
    public function setCancelComment($cancel_comment)
    {
        $this->container['cancel_comment'] = $cancel_comment;

        return $this;
    }

    /**
     * Gets order
     *
     * @return \Listae\Client\Model\Order
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param \Listae\Client\Model\Order $order order
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
