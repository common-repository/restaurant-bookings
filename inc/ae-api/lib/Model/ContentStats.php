<?php
/**
 * ContentStats
 *
 * PHP version 5
 *
 * @category Class
 * @package  Listae\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * listae API 2.0
 *
 * Documentación de los servicios REST de listae
 *
 * OpenAPI spec version: 2.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Listae\Client\Model;

use \ArrayAccess;
use \Listae\Client\ObjectSerializer;

/**
 * ContentStats Class Doc Comment
 *
 * @category Class
 * @package  Listae\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContentStats implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ContentStats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'catalogs' => 'int',
'cartes' => 'int',
'menus' => 'int',
'posts' => 'int',
'reviews' => 'int',
'images' => 'int',
'videos' => 'int',
'links' => 'int',
'bookings' => 'bool',
'takeaway' => 'bool',
'delivery' => 'bool',
'coupon' => 'bool',
'coupon_total' => 'int',
'verified_feedback' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'catalogs' => 'int32',
'cartes' => 'int32',
'menus' => 'int32',
'posts' => 'int32',
'reviews' => 'int32',
'images' => 'int32',
'videos' => 'int32',
'links' => 'int32',
'bookings' => null,
'takeaway' => null,
'delivery' => null,
'coupon' => null,
'coupon_total' => 'int32',
'verified_feedback' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'catalogs' => 'catalogs',
'cartes' => 'cartes',
'menus' => 'menus',
'posts' => 'posts',
'reviews' => 'reviews',
'images' => 'images',
'videos' => 'videos',
'links' => 'links',
'bookings' => 'bookings',
'takeaway' => 'takeaway',
'delivery' => 'delivery',
'coupon' => 'coupon',
'coupon_total' => 'couponTotal',
'verified_feedback' => 'verifiedFeedback'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'catalogs' => 'setCatalogs',
'cartes' => 'setCartes',
'menus' => 'setMenus',
'posts' => 'setPosts',
'reviews' => 'setReviews',
'images' => 'setImages',
'videos' => 'setVideos',
'links' => 'setLinks',
'bookings' => 'setBookings',
'takeaway' => 'setTakeaway',
'delivery' => 'setDelivery',
'coupon' => 'setCoupon',
'coupon_total' => 'setCouponTotal',
'verified_feedback' => 'setVerifiedFeedback'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'catalogs' => 'getCatalogs',
'cartes' => 'getCartes',
'menus' => 'getMenus',
'posts' => 'getPosts',
'reviews' => 'getReviews',
'images' => 'getImages',
'videos' => 'getVideos',
'links' => 'getLinks',
'bookings' => 'getBookings',
'takeaway' => 'getTakeaway',
'delivery' => 'getDelivery',
'coupon' => 'getCoupon',
'coupon_total' => 'getCouponTotal',
'verified_feedback' => 'getVerifiedFeedback'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['catalogs'] = isset($data['catalogs']) ? $data['catalogs'] : null;
        $this->container['cartes'] = isset($data['cartes']) ? $data['cartes'] : null;
        $this->container['menus'] = isset($data['menus']) ? $data['menus'] : null;
        $this->container['posts'] = isset($data['posts']) ? $data['posts'] : null;
        $this->container['reviews'] = isset($data['reviews']) ? $data['reviews'] : null;
        $this->container['images'] = isset($data['images']) ? $data['images'] : null;
        $this->container['videos'] = isset($data['videos']) ? $data['videos'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['bookings'] = isset($data['bookings']) ? $data['bookings'] : null;
        $this->container['takeaway'] = isset($data['takeaway']) ? $data['takeaway'] : null;
        $this->container['delivery'] = isset($data['delivery']) ? $data['delivery'] : null;
        $this->container['coupon'] = isset($data['coupon']) ? $data['coupon'] : null;
        $this->container['coupon_total'] = isset($data['coupon_total']) ? $data['coupon_total'] : null;
        $this->container['verified_feedback'] = isset($data['verified_feedback']) ? $data['verified_feedback'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets catalogs
     *
     * @return int
     */
    public function getCatalogs()
    {
        return $this->container['catalogs'];
    }

    /**
     * Sets catalogs
     *
     * @param int $catalogs Número total de catálogos
     *
     * @return $this
     */
    public function setCatalogs($catalogs)
    {
        $this->container['catalogs'] = $catalogs;

        return $this;
    }

    /**
     * Gets cartes
     *
     * @return int
     */
    public function getCartes()
    {
        return $this->container['cartes'];
    }

    /**
     * Sets cartes
     *
     * @param int $cartes Número total de cartas
     *
     * @return $this
     */
    public function setCartes($cartes)
    {
        $this->container['cartes'] = $cartes;

        return $this;
    }

    /**
     * Gets menus
     *
     * @return int
     */
    public function getMenus()
    {
        return $this->container['menus'];
    }

    /**
     * Sets menus
     *
     * @param int $menus Número total de menús
     *
     * @return $this
     */
    public function setMenus($menus)
    {
        $this->container['menus'] = $menus;

        return $this;
    }

    /**
     * Gets posts
     *
     * @return int
     */
    public function getPosts()
    {
        return $this->container['posts'];
    }

    /**
     * Sets posts
     *
     * @param int $posts Número total de publicaciones
     *
     * @return $this
     */
    public function setPosts($posts)
    {
        $this->container['posts'] = $posts;

        return $this;
    }

    /**
     * Gets reviews
     *
     * @return int
     */
    public function getReviews()
    {
        return $this->container['reviews'];
    }

    /**
     * Sets reviews
     *
     * @param int $reviews Número total de opiniones
     *
     * @return $this
     */
    public function setReviews($reviews)
    {
        $this->container['reviews'] = $reviews;

        return $this;
    }

    /**
     * Gets images
     *
     * @return int
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param int $images Número total de imágenes
     *
     * @return $this
     */
    public function setImages($images)
    {
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets videos
     *
     * @return int
     */
    public function getVideos()
    {
        return $this->container['videos'];
    }

    /**
     * Sets videos
     *
     * @param int $videos Número total de videos
     *
     * @return $this
     */
    public function setVideos($videos)
    {
        $this->container['videos'] = $videos;

        return $this;
    }

    /**
     * Gets links
     *
     * @return int
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param int $links Número total de enlaces
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets bookings
     *
     * @return bool
     */
    public function getBookings()
    {
        return $this->container['bookings'];
    }

    /**
     * Sets bookings
     *
     * @param bool $bookings Si tiene reservas activadas o no
     *
     * @return $this
     */
    public function setBookings($bookings)
    {
        $this->container['bookings'] = $bookings;

        return $this;
    }

    /**
     * Gets takeaway
     *
     * @return bool
     */
    public function getTakeaway()
    {
        return $this->container['takeaway'];
    }

    /**
     * Sets takeaway
     *
     * @param bool $takeaway Si admite takeaway online o no
     *
     * @return $this
     */
    public function setTakeaway($takeaway)
    {
        $this->container['takeaway'] = $takeaway;

        return $this;
    }

    /**
     * Gets delivery
     *
     * @return bool
     */
    public function getDelivery()
    {
        return $this->container['delivery'];
    }

    /**
     * Sets delivery
     *
     * @param bool $delivery Si admite delivery online o no
     *
     * @return $this
     */
    public function setDelivery($delivery)
    {
        $this->container['delivery'] = $delivery;

        return $this;
    }

    /**
     * Gets coupon
     *
     * @return bool
     */
    public function getCoupon()
    {
        return $this->container['coupon'];
    }

    /**
     * Sets coupon
     *
     * @param bool $coupon Si tiene cupones o no
     *
     * @return $this
     */
    public function setCoupon($coupon)
    {
        $this->container['coupon'] = $coupon;

        return $this;
    }

    /**
     * Gets coupon_total
     *
     * @return int
     */
    public function getCouponTotal()
    {
        return $this->container['coupon_total'];
    }

    /**
     * Sets coupon_total
     *
     * @param int $coupon_total Número total de cupones que se pueden comprar (no confundir con bonos emitibles)
     *
     * @return $this
     */
    public function setCouponTotal($coupon_total)
    {
        $this->container['coupon_total'] = $coupon_total;

        return $this;
    }

    /**
     * Gets verified_feedback
     *
     * @return bool
     */
    public function getVerifiedFeedback()
    {
        return $this->container['verified_feedback'];
    }

    /**
     * Sets verified_feedback
     *
     * @param bool $verified_feedback Si publica automáticamente las opiniones vinculadas a reservas o no
     *
     * @return $this
     */
    public function setVerifiedFeedback($verified_feedback)
    {
        $this->container['verified_feedback'] = $verified_feedback;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
